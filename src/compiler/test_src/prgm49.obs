# simple parser of Objeck written in Objeck
# R. Hollines

use System.IO;
use System.IO.File;
use Collection;

bundle Default {  
  class Hello {
    New() {
    }

    function : Main(args : String[]) ~ Nil {
      Run();
    }
    function : native : Run() ~ Nil {
      reserved := Map->New();
      reserved->Insert("function"->As(Compare), "keyword: function"->As(Base));
      reserved->Insert("Int"->As(Compare), "keyword: Int"->As(Base));
      reserved->Insert("Float"->As(Compare), "keyword: Float"->As(Base));
      reserved->Insert("class"->As(Compare), "keyword: class"->As(Base));
      reserved->Insert("bundle"->As(Compare), "keyword: bundle"->As(Base));
      reserved->Insert("native"->As(Compare), "keyword: native"->As(Base));

#      reader := FileReader->New("../compiler/test_src/prgm1.obs");
  reader := FileReader->New("/Users/randy/Documents/Code/main/src/compiler/test_src/prgm1.obs");
      line_num := 0;
      while(reader->IsEOF() <> true) {
        line := reader->ReadString();
        line_num := line_num + 1;
                  
        i := 0;  
        while(i < line->Size()) {    
          # skip whitespace
          while((line->Get(i) = ' ' | line->Get(i) = '\t') & i < line->Size()) {
            i := i + 1;
          };
          
          # parse
          if(i < line->Size()) {
            # word
            if(line->Get(i)->IsChar() = true) {
              string := "";
              while(line->Get(i)->IsChar() = true | line->Get(i) = '.') {
              string->Append(line->Get(i));
              i := i + 1;
            };
	
            result : String := reserved->Find(string->As(Compare));
            if(result <> Nil) {
              result->PrintLine();
            }
            else {
              "string '"->Print(); string->Print(); "'"->PrintLine();
            };
          }
          # number
          else if(line->Get(i)->IsDigit() = true) {
            number := "";
            is_dec := false;
            while(line->Get(i)->IsDigit() = true | line->Get(i) = '.') {
              if(line->Get(i) = '.') {
            	is_dec := true;
              };
              
              number->Append(line->Get(i));
              i := i + 1;
            };
	
            if(is_dec) {
              "decimal '"->Print(); number->Print(); "'"->PrintLine();
            }
            else {
              "integer '"->Print(); number->Print(); "'"->PrintLine();
            };
          }
          # other
          else {
            select(line->Get(i)) {
              label '(': {
            	"opren"->PrintLine();
              }
              
              label ')': {
            	"cpren"->PrintLine();
              }
	
              label '[': {
            	"obrace"->PrintLine();
              }
              
              label ']': {
            	"cbrace"->PrintLine();
              }      
	
              
              label '{': {
            	"ocbrace"->PrintLine();
              }
			
              label '}': {
            	"ccbrace"->PrintLine();
              }
              
              label '#': {
            	"pound"->PrintLine();
              }
	
              label '/': {
            	"div"->PrintLine();
              }
	
              label '*': {
            	"mul"->PrintLine();
              }
	
              label '+': {
            	"add"->PrintLine();
              }
	
              label '-': {
            	"sub"->PrintLine();
              }
	
              label '%': {
            	"mod"->PrintLine();
              }
              
              other: {
            	"'"->Print(); line->Get(i)->Print(); "'"->PrintLine();
              }
            };
            i := i + 1;
            };	
          };
        };
      };
      reader->Close();
    }
  }
}
