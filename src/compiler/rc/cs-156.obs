use System.IO;
use System.IO.File;
use Collection;

bundle Default {  
	class Flights {
		departures : CompareVector;
		arrivals : CompareVector;
		stops : IntVector;
		fares : IntVector;
  		
		New() {
			departures := CompareVector->New();
			arrivals := CompareVector->New();
			stops := IntVector->New();
			fares := IntVector->New();
		}
		
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				Flights->New()->Run(args[0]);
			};
		}
		
		method : native : Run(file : String) ~ Nil {
			reader := FileReader->New(file);
			while(reader->IsEOF() <> true) {
				ParseFlight(reader->ReadString());
			};
			reader->Close();
			
			"Route is: "->Print();
			airports := ParseAirports(IO.Console->ReadString());
			if(airports <> Nil) {
				depart := airports[0]->ToUpper();
				arrival := airports[1]->ToUpper();
				
				# TODO: validate airports
				depart_found := departures->Find(depart);
				if(depart_found < 0) {
					IO.Console->Print("No such departure airport ")->PrintLine(depart);
					return;
				};
				
				arrival_found := arrivals->Find(arrival);
				if(arrival_found < 0) {
					IO.Console->Print("No such arrival airport ")->PrintLine(arrival);
					return;
				};
							
				best_fare := 10000;
				best_fare_index := -1;
				fewest_stops := 10;
				fewest_stops_index := -1;
				
				IO.Console->Print("Flights found for ")->Print(depart)
					->Print(" to ")->PrintLine(arrival);
				"\tFare\tStops"->PrintLine();
        		"\t----\t-----"->PrintLine();
				each(i : departures) {
					if(departures->Get(i)->As(String)->Equals(depart) & 
						arrivals->Get(i)->As(String)->Equals(arrival)) {
						"\t$"->Print();
						fares->Get(i)->Print();
						'\t'->Print();
						stops->Get(i)->Print();
						IO.Console->PrintLine();
						
						if(fares->Get(i) < best_fare) {
							best_fare := fares->Get(i);
							best_fare_index := i;
						};
						
						if(stops->Get(i) < fewest_stops) {
							fewest_stops := stops->Get(i);
							fewest_stops_index := i;
						};
					};
				};
				
				if(best_fare_index > 0 & fewest_stops_index > 0) {
					IO.Console->Print("Best fare: $")->Print(best_fare)->Print(" (")
						->Print(stops->Get(best_fare_index))->PrintLine(" stops)");
					IO.Console->Print("Fewest stops: $")
						->Print(fares->Get(fewest_stops_index))->Print(" (")
						->Print(fewest_stops)->PrintLine(" stops)");
				};
			};
		}
		
		method : native : ParseAirports(airports : String) ~ String[] {
			# departure
			start := 0;
			end := 0;
			while(end < airports->Size() & airports->Get(end) <> ' ') {
				end += 1;
			};
			depart := airports->SubString(start, end - start);
			
			# arrival
			end += 1;
			start := end;
			while(end < airports->Size() & airports->Get(end) <> ' ') {
				end += 1;
			};
			arrival := airports->SubString(start, end - start);
			
			if(depart <> Nil & depart->Size() > 0 & 
				arrival <> Nil & arrival->Size() > 0) {
				pair := String->New[2];
				pair[0] := depart;
				pair[1] := arrival;
				
				return pair;
			};
			
			return Nil;
		}
		
		method : native : ParseFlight(line : String) ~ Nil {
			if(line <> Nil & line->Size() > 0) {
				# departure
				start := 0;
				end := 0;
				while(end < line->Size() & line->Get(end) <> ' ') {
					end += 1;
				};
				depart := line->SubString(start, end - start);
				
				# arrival
				end += 1;
				start := end;
				while(end < line->Size() & line->Get(end) <> ' ') {
					end += 1;
				};
				arrival := line->SubString(start, end - start);
				
				# stops
				end += 1;
				start := end;
				while(end < line->Size() & line->Get(end) <> ' ') {
					end += 1;
				};
				num_stops := line->SubString(start, end - start);
				
				# price
				end += 2;
				start := end;
				while(end < line->Size() & line->Get(end) <> ' ') {
					end += 1;
				};
				fare := line->SubString(start, end - start);
				
				departures->AddBack(depart);
				arrivals->AddBack(arrival);
				stops->AddBack(num_stops->ToInt());
				fares->AddBack(fare->ToInt());

#~				
				depart->PrintLine();
				arrival->PrintLine();
				num_stops->PrintLine();
				fare->PrintLine();
				"---------"->PrintLine();
~#				
			};
		}
	}
}
