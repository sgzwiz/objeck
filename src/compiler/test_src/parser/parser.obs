use IO;
use Collection;

bundle CodeGen {
	class Parser {
		@tokens : Vector;
		@pos : Int;
		
		New(tokens : Vector) {
			@tokens := tokens;
			@pos := 0;
		}
		
		# TODO: IN/OUT i.e. float* f
		
		method : Match(type : Type) ~ Bool {
			if(@pos < @tokens->Size()) {
				token := @tokens->Get(@pos)->As(Token);
				return token->GetType() = type;
			};
			
			return false;
		}
		
		method : Next() ~ Nil {
			if(@pos < @tokens->Size()) {
				@pos += 1;
			};
		}
		
		method : Token() ~ Token {
			if(@pos < @tokens->Size()) {
				return @tokens->Get(@pos);
			};
			
			return Token->New(Type->EOS);
		}
		
		method : public : Parse() ~ Nil {
			if(Match(Type->HBAR) = false) {
				"expected '|'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->TYPES_ID) = false) {
				"expected 'TYPES'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->HBAR) = false) {
				"expected '|'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			# parse types
			while(Match(Type->EOS) = false & Match(Type->HBAR) = false) {
				if(Match(Type->IDENT) = false) {
					"expected ident"->PrintLine();
					Runtime->Exit(1);
				};
				name := Token()->GetValue();
				Next();
				
				if(Match(Type->MAP) = false) {
					"expected '=>'"->PrintLine();
					Runtime->Exit(1);
				};
				Next();
							
				select(Token()->GetType()) {
					label Type->CHAR_ID:
					label Type->INT_ID: 
					label Type->FLOAT_ID:
					label Type->BOOL_ID: {
						Next();
					}
					
					other: {
						"expected type"->PrintLine();
						Runtime->Exit(1);
					}	
				};
				
				IO.Console->Print("mapping: name=")->PrintLine(name);
			};
			
			Next();
			
			if(Match(Type->CLASSES_ID) = false) {
				"expected ''CLASSES'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->HBAR) = false) {
				"expected '|'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->CLASS_ID) = false) {
				"expected '@class'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->IDENT) = false) {
				"expected ident"->PrintLine();
				Runtime->Exit(1);
			};
			class_name := Token()->GetValue();
			Next();
			
			IO.Console->Print("class=")->PrintLine(class_name);
			
			if(Match(Type->OCBR) = false) {
				"expected '{'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			while(Match(Type->EOS) = false & Match(Type->CCBR) = false) {
				if(Match(Type->METHOD_ID)) {
					ParseMethod();
				}
				else if(Match(Type->FUNCTION_ID)) {
					Next();
				}
				else if(Match(Type->NEW_ID)) {
					Next();
				}
				else {
					"expected method, function or new"->PrintLine();
					Runtime->Exit(1);
				};
			};
					
#~		
			each(i : @tokens) {
				token := @tokens->Get(i)->As(Token);
				if(token->GetType() = Type->IDENT) {
					Console->Print(i)->Print(": IDENT '")->Print(token->GetValue())->PrintLine("'");
				}
				else {
					Console->Print(i)->Print(": ")->PrintLine(token->GetValue());
				};
			};
~#
		}

		method : public : ParseMethod() ~ Nil {
			Next();
			if(Match(Type->COLON) = false) {
				"expected ':'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->VOID_ID)) {
				"\treturn: void"->PrintLine();
			}
			else if(Match(Type->IDENT)) {
				return_name := Token()->GetValue();
				IO.Console->Print("\t")->PrintLine(return_name);	
			}
			else {
				"expected c type"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->IDENT) = false) {
				"expected ident"->PrintLine();
				Runtime->Exit(1);
			};
			method_name := Token()->GetValue();
			Next();
			
			IO.Console->Print("method: name=")->PrintLine(method_name);
			
			if(Match(Type->OPRN) = false) {
				"expected '('"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			#TODO: void
			dclr_count := 0;
			while(Match(Type->EOS) = false & Match(Type->CPRN) = false) {
				if(Match(Type->IDENT) = false) {
					"expected ident"->PrintLine();
					Runtime->Exit(1);
				};
				dclr_type := Token()->GetValue();
				Next();
				
				if(Match(Type->STAR)) {
					Next();
				}
				else if(Match(Type->AND)) {
					Next();
				};
				
				if(Match(Type->IDENT) = false) {
					"expected ident"->PrintLine();
					Runtime->Exit(1);
				};
				dclr_name := Token()->GetValue();
				Next();
				
				if(Match(Type->COMMA)) {
					Next();
				};
			
				IO.Console->Print("\tdecleartion type=")->Print(dclr_type)
					->Print(", name=")->PrintLine(dclr_name);
					
				dclr_count += 1;
			};
			
			if(Match(Type->CPRN) = false) {
				"expected ')'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			IO.Console->Print("\tdecleartion count=")->PrintLine(dclr_count);
			
			if(Match(Type->DELIM) = false) {
				"expected '|'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			# parse types
			while(Match(Type->EOS) = false & Match(Type->DELIM) = false) {
				if(Match(Type->NUM) = false) {
					"expected number"->PrintLine();
					Runtime->Exit(1);
				};
				from_num := Token()->GetValue();
				Next();
				
				if(Match(Type->MAP) = false) {
					"expected '=>'"->PrintLine();
					Runtime->Exit(1);
				};
				Next();
							
				if(Match(Type->NUM) = false) {
					"expected number"->PrintLine();
					Runtime->Exit(1);
				};
				to_num := Token()->GetValue();
				Next();
				
				if(Match(Type->COMMA)) {
					Next();
				};
				
				IO.Console->Print("\tmapping: from=")->Print(from_num)
					->Print(", to=")->PrintLine(to_num);
			};
			
			if(Match(Type->DELIM) = false) {
				"expected '|'"->PrintLine();
				Runtime->Exit(1);
			};
			Next();
			
			if(Match(Type->IDENT) = false) {
				"expected ident"->PrintLine();
				Runtime->Exit(1);
			};
			to_name := Token()->GetValue();
			Next();
			
			IO.Console->Print("\tto: name=")->PrintLine(to_name);
		}
	}
}	