use System.IO;
use Collection;

#~
# Basic NFA based regex engine
# R. Hollines (c) 2012
# 
# Based on an implementation by Russ Cox.
# Copyright (c) 2007 Russ Cox.
# Can be distributed under the MIT license, see bottom of file.
~#

bundle RegEx {
	class RegEx {
		@input : String;
		@start : State;
		
		New(input : String) {	
			@input := input;
			postfix := RegEx2Postfix(@input);
			if(postfix <> Nil) {
				@start := Postfix2Nfa(postfix);
			};
		}
		
		#~
		 translate regex to postfix format
		~#
		method : RegEx2Postfix(input : String) ~ String {
			output := "";
			parens := IntStack->New();
			alt_count := 0;
			atom_count := 0;
			
			each(i : input) {
				char := input->Get(i);
				select(char) {
					label '[': {
						start := 0;
						end := 0;
						
						i += 1;
						char := input->Get(i);
						if(char->IsDigit() | char->IsChar()) {
							start := char;
						}
						else {
							return Nil;
						};

						i += 1;
						char := input->Get(i);
						if(char <> '-') {
							return Nil;
						};

						i += 1;
						char := input->Get(i);
						if(char->IsDigit() | char->IsChar()) {
							end := char;
						}
						else {
							return Nil;
						};
						
						i += 1;
						char := input->Get(i);
						if(char <> ']') {
							return Nil;
						};
						
						if(start >= end) {
							return Nil;
						};
						
						j := start;
						while(j <= end) {
							output->Append(j->As(Char));
							j += 1;
						};
						
						count := end - start;
						while(count <> 0) {
							output->Append('|');
							count -= 1;
						};
						atom_count += 1;
					}
					
					label '(': {
						if(atom_count > 1) {
							atom_count -= 1;
							output->Append('\b');
						};
						
						parens->Push(alt_count);
						parens->Push(atom_count);
						
						alt_count := 0;
						atom_count := 0;
					}
					
					label '|': {
						if(atom_count = 0) {
							return Nil;
						};
							
						atom_count -= 1;
						while(atom_count > 0) {
							output->Append('\b');
							atom_count -= 1;
						};
						
						alt_count += 1;
					}
						
					label ')': {
						if(parens->Size() = 0) {
							return Nil;
						};
						
						if(atom_count = 0) {
							return Nil;
						};
						
						atom_count -= 1;
						while(atom_count > 0) {
							output->Append('\b');
							atom_count -= 1;
						};
						
						while(alt_count > 0) {
							output->Append('|');
							alt_count -= 1;
						};
						
						atom_count := parens->Pop();
						alt_count := parens->Pop();
						
						atom_count += 1;
					}
					
					label '*':
					label '+':
					label '?': {
						if(atom_count = 0) {
							return Nil;
						};
						
						output->Append(char);
					}
					
					other: {
						if(atom_count > 1) {
							atom_count -= 1;
							output->Append('\b');
						};
						
						output->Append(char);
						atom_count += 1;
					}
				};
			};
			
			if(parens->Size() <> 0) {
				return Nil;
			};
			
			atom_count -= 1;
			while(atom_count > 0) {
				output->Append('\b');
				atom_count -= 1;
			};
			
			while(alt_count > 0) {
				output->Append('|');
				alt_count -= 1;
			};
			
			return output;
		}
		
		#~
		# Create NFA for simulation
		~#
		method : native : Postfix2Nfa(postfix : String) ~ State {
			stack := Stack->New();
			
			each(i : postfix) {
				char := postfix->Get(i);
				select(char) {
					other: {
						t := Transition->New(char->As(Int));   
						s := State->New(t, Transition->New(-1));
						f := Frame->New(s, ListUitls->NewList(s->GetOut1()));
						stack->Push(f);
					}
					
					label '\b': {  
						e2 := stack->Pop()->As(Frame);  
						e1 := stack->Pop()->As(Frame);
						ListUitls->Link(e1->GetOuts(), e2->GetStart());
						f := Frame->New(e1->GetStart(), e2->GetOuts());
						stack->Push(f);
					}
					
					label '|': {  
						e2 := stack->Pop()->As(Frame);  
						e1 := stack->Pop()->As(Frame);
						
						t1 := Transition->New(-1);
						t2 := Transition->New(-1);
						t1->SetEnd(e1->GetStart());
						t2->SetEnd(e2->GetStart());
						
						s := State->New(t1, t2); 
						f := Frame->New(s, ListUitls->Append(e1->GetOuts(), e2->GetOuts()));
						stack->Push(f);
					}
					
					label '?': {
						e := stack->Pop()->As(Frame);
						
						t1 := Transition->New(-1);
						t2 := Transition->New(-1); 
						t1->SetEnd(e->GetStart());
						
						s := State->New(t1, t2); 
						f := Frame->New(s, ListUitls->Append(e->GetOuts(), ListUitls->NewList(t2)));
						stack->Push(f);
					}
					
					label '*': {  
						e := stack->Pop()->As(Frame);
						
						t1 := Transition->New(-1);
						t2 := Transition->New(-1); 
						t1->SetEnd(e->GetStart());
						
						s := State->New(t1, t2);
						ListUitls->Link(e->GetOuts(), s);
						f := Frame->New(s, ListUitls->NewList(s->GetOut2()));
						stack->Push(f);
					}
					
					label '+': {
						e := stack->Pop()->As(Frame);
						
						t1 := Transition->New(-1);
						t2 := Transition->New(-1); 
						t1->SetEnd(e->GetStart());
						
						s := State->New(t1, t2);
						ListUitls->Link(e->GetOuts(), s);
						f := Frame->New(e->GetStart(), ListUitls->NewList(t2));
						stack->Push(f);
					}
				};
			};
			
			e := stack->Pop()->As(Frame);
			if(stack->Size() <> 0) {
				return Nil;
			};

			end_state := State->New(Nil->As(Transition), Nil->As(Transition)); 
			end_state->SetType(0);
    
			outs := e->GetOuts();
			each(i : outs) {
				tran := outs->Get(i)->As(Transition);
				if(tran->GetValue() <> -1) {
					t1 := Transition->New(-1);  
						t2 := Transition->New(-1);   
						s := State->New(t1, t2);
						tran->SetEnd(s);  
						s->GetOut1()->SetEnd(end_state); 
						s->GetOut2()->SetEnd(end_state);
				}
				else {
					tran->SetEnd(end_state);
				};
			};

			return e->GetStart();
		}
		
		#~
		# Match pattern
		~#
		method : native : Step(clist : Vector, char : Char) ~ Vector { 
			if(clist->Size() = 0) {
				return clist;
			};
			
			all_null := true;
			matched := false;
			nlist := Vector->New();
			
			each(i : clist) {
				t := clist->Get(i)->As(Transition);
				if(t <> Nil) {
					check := t->GetValue();
					
					if(check <> -1) {
						all_null := false;
					};	
				
					if(check = '.'  | (check = char & t->GetEnd()->GetType() = 1)) {
					  matched := true;
					  if(t->GetEnd()->GetOut1()->GetEnd() <> Nil) {
					  	nlist->AddBack(t->GetEnd()->GetOut1());
					  };
					  
					  if(t->GetEnd()->GetOut2()->GetEnd() <> Nil) {
					  	nlist->AddBack(t->GetEnd()->GetOut2());
					  };
					}
					else if(check = char & t->GetEnd()->GetType() = 0) {          
						matched := true;  
						return ListUitls->NewList(t); 
					}
					else if(check = -1 & t->GetEnd() <> Nil) {
						nlist->AddBack(t->GetEnd()->GetOut1());
						nlist->AddBack(t->GetEnd()->GetOut2());
					};
				};
			};
			
			if(all_null) {
				return Step(nlist, char);
			};
			
			if(matched = false) {
				return Step(nlist, char);
			};
			
			return nlist;
		}
		
		method : IsMatch(clist : Vector) ~ Bool {
			each(i : clist) {
				t := clist->Get(i)->As(Transition);
				if(t <> Nil & t->GetValue() = -1 & t->GetEnd() <> Nil & t->GetEnd()->IsMatched()) {
					return true;
				}
				else if(t <> Nil & t->GetValue() = '.' & t->GetEnd() <> Nil) {
					return true;
				};
			};
			
			return false;
		}
		
		# match all
		method : MatchAll(state : State, input : String) ~ Bool {
			clist := Vector->New();
			clist->AddBack(state->GetOut1());
			clist->AddBack(state->GetOut2());

			each(i : input) {
				char := input->Get(i);
				char := char and 0xff;

				clist := Step(clist, char);
				if(clist->Size() = 0) {
					return false;
				};
 			};

			return IsMatch(clist);
 		}
		
		method : public : MatchAll(input : String) ~ Bool {
			if(@start <> Nil) {
				return MatchAll(@start, input);
			};
			
			return false;
		}
		
		# find longest match
		method : Find(state : State, input : String, offset : Int) ~ Int {
			longest := -1;
			clist := Vector->New();  
			clist->AddBack(state->GetOut1()->As(Base));  
			clist->AddBack(state->GetOut2()->As(Base));
			
			for(i := offset; i < input->Size(); i += 1;) {
				char := input->Get(i);  
				char := char and 0xff;
				
				clist := Step(clist, char);
				if(clist->Size() <> 0) {    		
					if(IsMatch(clist)) {
						if(i > longest) {
							longest := i;
						};
					};
				};
			};
						
			return longest; 
		}
		
		method : public : Find(input : String, offset : Int) ~ Int {
			if(@start <> Nil & offset < input->Size()) {
				return Find(@start, input, offset);
			};
			
			return -1;
		}
		
		method : public : Find(input : String) ~ Int {
			return Find(input, 0);
		}
	}
	
	#~
	# Supporting classes
	~#
	class Transition {
		@value : Int;
		@end : State;
    
		New(value : Int) {
			@value := value;  
		}
		
		method : public : GetValue() ~ Int {
			return @value;
		}
		
		method : public : GetEnd() ~ State {
			return @end;
		}
		
		method : public : SetEnd(end : State) ~ Nil {
			@end := end;
		}
	}
	
	class State {
		@out1 : Transition;
		@out2 : Transition;
		@type : Int;
		
		New(out1 : Transition, out2 : Transition) {
			@out1 := out1;  
			@out2 := out2;
			@type := 1;
		}
   
		method : public : SetType(type : Int) ~ Nil {  
			@type := type;
		}
   	
		method : public : GetType() ~ Int {  
			return @type;
		}
   	
		method : public : IsMatched() ~ Bool { 
			return @type = 0;  
		}
    
		method : public : GetOut1() ~ Transition {  
			return @out1; 
		}
    
		method : public : GetOut2() ~ Transition {  
			return @out2; 
		}
	} 
	
	class Frame {
		@start : State;
		@outs : Vector;
    
		New(start : State, outs : Vector) {
			@start := start;  
			@outs := outs;  
		}
  	
		method : public : GetStart() ~ State {  
			return @start;
		}

		method : public : GetOuts() ~ Vector {  
			return @outs;
		}
	}
  
	class ListUitls { 
		function : Link(list : Vector, state : State) ~ Nil { 
			each(i : list) {
				t := list->Get(i)->As(Transition);
				t->SetEnd(state);
			};
		}
    
		function : Append(list1 : Vector, list2 : Vector) ~ Vector {
			list1->AddBack(list2);
			return list1;
		}

		function : NewList(out : Transition) ~ Vector {
			result := Vector->New();
			result->AddBack(out->As(Base)); 
			return result;
		}  
	}
}

#~
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
~#
