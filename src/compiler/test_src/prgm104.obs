# AMD Athlon Dual Core 485oe 
# from your example  array
#   obc -src a3.obs -dest a3.obe -opt s3
#  end=70000    error memory
#  end=700000  other   error memory

use IO;

bundle Default {
	class SumSeries {
		function : Main(args : String[]) ~ Nil {
			DoSumSeries();
		}

		function : native : DoSumSeries() ~ Nil {

			start := 1;
			end := 70000;
      array := Int->New[end];
# Console->Print("-1");

			sum := 0.0;
 
			for(x : Int := start; x <= end-1; x += 1;) {
      array[x] := x;
			};

array->Size()->PrintLine();
			
# Console->Print("-2");
			s := IO.Serializer->New();
# Console->Print("1");
			s->Write(array->As(Int[]));
# Console->Print("2");
			writer := IO.FileWriter->New("objects.dat");			
# Console->Print("3");

			writer->WriteBuffer(s->Serialize());
# Console->Print("4");
			writer->Close();
# Console->Print("5");

			buffer := IO.FileReader->ReadBinaryFile("objects.dat");			
      array1 := Int->New[end];
# Console->Print("0");
			d := IO.Deserializer->New(buffer);

			array1 := d->ReadIntArray()->As(Int[]);
Console->PrintLine("62");
# "6"->PrintLine();
array1->Size()->PrintLine();
# Console->Print("7");
# array1[2222]->PrintLine();
 
			# Console->Print("Sum of f(x) from ")->Print(start)->Print(" to ")->Print(end)->Print(" is ")->PrintLine(sum);
		}

		function : native : f(x : Float) ~ Float {
			return 1.0 / (x * x);
		}
	}
}
