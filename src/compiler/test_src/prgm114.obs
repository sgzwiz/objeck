use IO;

bundle RegEx {
	enum TokenType := -32 {
		POW,
		PLUS,
		MUL,
		CPN,
		OPN
	}
	
	class PostFix {
		@input : Int[];
		@buffer_max : Int;

		New(input : String) {
			@buffer_max := 256;
			@input := Encode(input);
		}
		
		method : public : Encode(input : String) ~ Int[] {
			output := Int->New[@buffer_max];
			output_index := 0;	
			
			each(i : input) {
				value := input->Get(i);
				select(value) {
					label '(': {
						output[output_index] := TokenType->OPN;
					}
					
					label ')': {
						output[output_index] := TokenType->CPN;
					}
					
					label '*': {
						output[output_index] := TokenType->MUL;
					}
					
					label '+': {
						output[output_index] := TokenType->PLUS;
					}
					
					label '^': {
						output[output_index] := TokenType->POW;
					}
					
					other: {
						output[output_index] := value;
					}
				};
				output_index += 1;
			};
			
			return output;
		}
		
		method : public : Parse() ~ Int[] {
			output := Int->New[@buffer_max];
			output_index := 0;
			
			stack := Int->New[@buffer_max];
			stack_index := 0;
			
			i := 0;
			value := @input[i];
			while(value <> 0) {
				select(value) {
					label TokenType->OPN: {
						stack[stack_index] := value;
						stack_index += 1;
					}
					
					label TokenType->POW:
					label TokenType->PLUS:
					label TokenType->MUL:
					label TokenType->CPN: {
						if(stack_index = 0) {
							stack[stack_index] := value;
							stack_index += 1;
						}
						else {
							if(stack[stack_index - 1] >= value) {
								while(stack_index > 0) {
									stack_index -= 1;
									stack_value := stack[stack_index];
									
									if(stack_value <> TokenType->OPN->As(Int) & 
											stack_value <> TokenType->CPN->As(Int)) {
										output[output_index] := stack_value;
										output_index += 1;
									};
								};
							};
							
							if(value <> TokenType->CPN->As(Int)) {
								stack[stack_index] := value;
								stack_index += 1;
							};
						};
					}
					
					other: {
						output[output_index] := value;
						output_index += 1;
					}
				};
				# update
				i += 1;
				value := @input[i];
			};
			
			while(stack_index > 0) {
				stack_index -= 1;
				stack_value := stack[stack_index];
				
				output[output_index] := stack_value;
				output_index += 1;
			};
			
			return output;
		}
		
		function : Dump(input : Int[]) ~ Nil {
			if(input = Nil) {
				return;
			};
			
			each(i : input) {
				value := input[i];
				select(value) {
					label TokenType->PLUS: {
						'+'->PrintLine();
					}
					
					label TokenType->MUL: {
						'*'->PrintLine();
					}
					
					label TokenType->POW: {
						'^'->PrintLine();
					}
					
					other: {
						char := value->As(Char);
						if(char = 0) {
							return;
						};
						char->PrintLine();
					}
				};
			};
		}

		function : Main(args : String[]) ~ Nil {
			postfix := PostFix->New(args[0]);
			Dump(postfix->Parse());
		}
	}
}
