bundle Default {
	class Hello {
		function : native : Eval_A(i : Int, j : Int) ~ Float {
			return 1.0/((i+j)*(i+j+1.0)/2+i+1.0);
		}


		function : native : Eval_A_Times_U(N : Int, u : Float[], Au : Float[]) ~ Nil {
			for(i:=0;i<N;i+=1;) {
				Au[i]:=0.0;
				for(j:=0;j<N;j+=1;) {
					Au[i] += Eval_A(i,j)*u[j];
				};
			};
		}

		function : native : Eval_At_Times_U(N : Int, u : Float[], Au : Float[]) ~ Nil {
			for(i:=0;i<N;i+=1;) {
				Au[i]:=0.0;
				for(j:=0;j<N;j+=1;) {
					Au[i] += Eval_A(j,i)*u[j];
				};
			};
		}

		function : native : Eval_AtA_Times_U(N : Int, u : Float[], AtAu : Float[]) ~ Nil {
			v := Float->New[N]; 
			Eval_A_Times_U(N,u,v); 
			Eval_At_Times_U(N,v,AtAu); 
		}

		function : Main(args : String[]) ~ Nil {
			N := 2000;
			if (args->Size() > 0) {
				N := args[0]->ToInt();
			};	
			Run(N);
		}

		function : native : Run(N : Int) ~ Nil {
			u := Float->New[N];
			v := Float->New[N];

			for(i:=0;i<N;i+=1;) {
				u[i]:=1;
			};

			for(i:=0;i<10;i+=1;) {
				Eval_AtA_Times_U(N,u,v);
				Eval_AtA_Times_U(N,v,u);
			};
			vBv:=0.0;
			vv:=0.0;
			
			for(i:=0;i<N;i+=1;) { 
				vBv+=u[i]*v[i]; 
				vv+=v[i]*v[i]; 
			};
			(vBv/vv)->SquareRoot()->PrintLine();			
		}
	}
}
