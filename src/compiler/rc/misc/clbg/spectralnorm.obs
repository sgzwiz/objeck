bundle Default {
	class SpectralNorm {
		function : Main(args : String[]) ~ Nil {
			n := 5500;
         if (args->Size() > 0) {
            n := args[0]->ToInt();
         };
			Approximate(n)->PrintLine();
		}

		function : Approximate(n : Int) ~ Float {
			# create unit vector
			u := Float->New[n];
			for(i:=0; i<n; i+=1;) { u[i] := 1.0; };
		
			# 20 steps of the power method
			v := Float->New[n];
			for(i:=0; i<n; i+=1;) { v[i] := 0.0; };
		
			for(i:=0; i<10; i+=1;) {
				MultiplyAtAv(n,u,v);
				MultiplyAtAv(n,v,u);
			};
		
			# B=AtA         A multiplied by A transposed
			# v.Bv /(v.v)   eigenvalue of v
			vBv := 0.0; vv := 0.0;
			for(i:=0; i<n; i+=1;) {
				vBv += u[i]*v[i];
				vv  += v[i]*v[i];
			};

			return (vBv/vv)->SquareRoot();
		}

		# return element i,j of infinite matrix
		function : A(i : Int, j : Int) ~ Float {
			return 1.0/((i+j)*(i+j+1)/2 +i+1);
		}
	
		# multiply vector v by matrix A */
		function : MultiplyAv(n : Int, v : Float[], Av : Float[]) ~ Nil {
			for(i:=0; i<n; i+=1;){
				Av[i] := 0;
				for (j:=0; j<n; j+=1;) { Av[i] += A(i,j)*v[j]; };
			};
		}
	
		# multiply vector v by matrix A transposed */
		function : MultiplyAtv(n : Int, v : Float[], Atv : Float[]) ~ Nil {
			for(i:=0;i<n;i+=1;){
				Atv[i] := 0;
				for(j:=0; j<n; j+=1;) { Atv[i] += A(j,i)*v[j]; };
			};
		}
	
		# multiply vector v by matrix A and then by matrix A transposed */
		function : MultiplyAtAv(n : Int, v : Float[], AtAv : Float[]) ~ Nil {
			u := Float->New[n];
			MultiplyAv(n,v,u);
			MultiplyAtv(n,u,AtAv);
		}
	}
}
