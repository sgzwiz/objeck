bundle Default {
	class A from System.Base {
		@value : Int;

		New(value : Int) {
			@value := value;
		}

		method : public : Compare(right : System.Base) ~ Int {
			if(right <> Nil) {
				if(GetClassID() = right->GetClassID()) {
					a : A := right->As(A);
		
					r := right->As(A);
					if(@value = r->Get()) {
						return 0;
					};

					if(@value < a->Get()) {
						return -1;
					};

					return 1;
				};
			};

			return 0;
		}


		method : public : Get() ~ Int {
			return @value;
		}
	}

	class B from System.Base {
		@value : Int;

		New() {
		}

		New(value : Int) {
			@value := value;
		}

		method : public : Compare(right : System.Base) ~ Int {
			if(right <> Nil) {
				if(GetClassID() = right->GetClassID()) {
					a : A := right->As(A);
			
					if(@value = a->Get()) {
						return 0;
					};

					if(@value < a->Get()) {
						return -1;
					};

					return 1;
				};
			};

			return 0;
		}


		method : public : Get() ~ Int {
			return @value;
		}
	}

	class Test {
#		function : native : Foo(b : System.Base) ~ Nil {
		function : Foo(b : System.Base) ~ Nil {
			a : A := b->As(A);
			a->Get()->PrintLine();
		}

		function : Main(args : System.String[]) ~ Nil {
			Run();
		}

		function : native : Run() ~ Nil {
#~
			a : A := A->New(13);
			Foo(a->As(System.Base));
~#

			a : A := A->New(13);
			b : B := B->New(13);
			aa : A := A->New(7);
			aaa : A := A->New(13);
			aaaa : A := A->New(13);
			aaab: A := A->New(13);
			aaac: A := A->New(13);
			aaad: A := A->New(13);
			aaae: A := A->New(13);

			a->Compare(aa->As(System.Base))->PrintLine();
			if(a->Compare(aaa->As(System.Base)) = 0) {
				"equal"->PrintLine();
			};
			(a->GetClassID() = a->GetClassID())->PrintLine();
			(a->GetClassID() = b->GetClassID())->PrintLine();

			a->Compare(aa->As(System.Base))->PrintLine();
			if(a->Compare(aaa->As(System.Base)) = 0) {
				"equal"->PrintLine();
			};
			(a->GetClassID() = a->GetClassID())->PrintLine();
		}
	}
}
