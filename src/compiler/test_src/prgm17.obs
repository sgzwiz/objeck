bundle Default {
	class Foo {
		i : Int;
		f : Float;
		
		New(v0 : Int, v1 : Float) {
			i := v0;
			f := v1;	
		}
		
		method : public : GetFloat() ~ Float {
			#x : Float :=  @self->GetFloat2();
			(@self->GetFloat2()+i)->PrintLine();
			# (x+i)->PrintLine();
                        return i * f;
		}

		method : public : native : GetFloat2() ~ Float {
			# a : Float := 45.5;
			# (50.0 - a)->PrintLine();
			return 3 / f;
		}

		method : public : native : GetInt2() ~ Int {
			return 13;
		}	
	}

	class Test {
		function : Main(args : System.String[]) ~ Nil {
			bb : Byte[,] := Byte->New[3,3];
                        v : Int := 0;
                        i : Int := 0;
                        while(i < 3) {
                                j : Int := 0;
                                while(j < 3) {
                                        bb[i,j] := v;
                                        v := v + 1;
                                        j := j + 1;
                                };
                                i := i + 1;
                        };

			f : Foo := Foo->New(10, 13.3);
			Run(f,bb);
		}
		
		function : Run(f:Foo, bb : Byte[,]) ~ Nil {
			(f->GetFloat2() + 3)->PrintLine();
			(f->GetInt2() + 3)->PrintLine();
			f->GetFloat()->PrintLine();		
#			bb[0,1]->PrintLine();
			# f->GetFloat2();
			f->GetFloat2()->PrintLine();		
		}
	}
}
