#~ The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/

   transliterated from Isaac Gouy's C# program
   contributed by Randy Hollines
~#

bundle Default {
	class FannkuchRedux {
		function : native : Fannkuch(n : Int) ~ Int[] {
			answer : Int[];
			p := Int->New[n];
			q := Int->New[n];
			s := Int->New[n]; 

			sign := 1; maxflips := 0;
			sum := 0; m := n-1;

			for(i:=0; i<n; i+=1;){ p[i] := i; q[i] := i; s[i] := i; };
			done := false;
			do {
				# Copy and flip.
				q0 := p[0];                                         # Cache 0th element.
				if (q0 <> 0){
					for(i:=1; i<n; i+=1;) {q[i] := p[i]; };           # Work on a copy.
					flips := 1;
					do { 
						qq := q[q0]; 
						if (qq = 0){ 
							sum += sign*flips;
							if (flips > maxflips) {maxflips := flips;};   # New maximum?
							break; 
						};
						q[q0] := q0; 
						if (q0 >= 3){
							i := 1; j := q0 - 1; t : Int;
							do { t := q[i]; q[i] := q[j]; q[j] := t; i+=1; j-=1; } while (i < j); 
						};
						q0 := qq; flips+=1;
					} while (true); 
				};
				# Permute.
				if (sign = 1){
					t := p[1]; p[1] := p[0]; p[0] := t; sign := -1;   # Rotate 0<-1.
				} else { 
					t := p[1]; p[1] := p[2]; p[2] := t; sign := 1;    # Rotate 0<-1 and 0<-1<-2.
					for(i:=2; i<n; i+=1;){ 
						sx := s[i];
						if (sx <> 0){ s[i] := sx-1; break; };
						if (i = m) {
							answer := Int->New[2];
							answer[0] := sum;
							answer[1] := maxflips;
							done := true;
							return answer;
						};
						s[i] := i;
						# Rotate 0<-...<-i+1.
						t := p[0]; 
						for(j:=0; j<=i; j+=1;){ p[j] := p[j+1]; };		
						p[i+1] := t;
					};
				};
			} while (done = false);	

			return Nil;
		}

		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1 ) {
				n := args[0]->ToInt();
				pf := Fannkuch(n);
				pf[0]->PrintLine();
				IO.Console->Print("Pfannkuchen(")->Print(n)->Print(") = ")->PrintLine(pf[1]);
			};
		}
	}
}
