#~~
# Core class libraries for Objeck
# Copyright (c) 2008-2013 Randy Hollines
# 
# credits:
# H.W. Lang - merge sort implementation
# Map classes uses a red-black tree variant called an Arne Andersson tree
~~#	

use System.IO.Net; 
use System.IO.File;

bundle Collection {
	#~~~~~~~~~~~~~~~~~~~~~~~
	# Vectors
	~~~~~~~~~~~~~~~~~~~~~~~#
	class IntVector {
		@values : Int[];
		@size : Int;
		
		New() {
			@values := Int->New[8];
			@size := 0;
		}

		New(values : IntVector) {
			@values := values->ToArray();
			@size := values->Size();
		}

		New(values : Int[]) {
			@values := Int->New[values->Size() + values->Size() / 2];
			@size := values->Size();
			Runtime->Copy(@values, 0, values, 0, @size);
		}

		method : native : Expand() ~ Nil {
			if(@size >= @values->Size()) {
				temp : Int[] := Int->New[@size * 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
		}

		method : public : AddBack(values : IntVector) ~ Nil {
			max := values->Size() + @size;
			if(max >= @values->Size()) {
				temp : Int[] := Int->New[max + max / 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
			
			temp := values->ToArray();
			Runtime->Copy(@values, @size, temp, 0, temp->Size());
			@size := max;
		}

		method : public : AddBack(value : Int) ~ Nil {
			Expand();
			@values[@size] := value;
			@size := @size + 1;
		}

		method : public : RemoveBack() ~ Int {
			if(@size > 0) {
				@size -= 1;
				return @values[@size];
			};
	
			return 0;
		}
		
		method : public : Remove(i : Int) ~ Int {
			if(i > -1 & i < @size) {
				temp := Int->New[@values->Size()];
				Runtime->Copy(temp, 0, @values, 0, i);
				Runtime->Copy(temp, i, @values, i + 1, @size - i - 1);
				value := @values[i];
				@values := temp;
				@size -= 1;
				return value;
			};
			
			return 0;
		}

		method : public : Get(index : Int) ~ Int {
			if(index > -1 & index < @size) {
				return @values[index];
			};

			return 0;
		}

		method : public : Set(value : Int, index : Int) ~ Bool {
			if(index > -1 & index < @size) {
				@values[index] := value;
				return true;
			};
			
			return false;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}
		
		method : public : IsEmpty() ~ Bool {
			return @size = 0;
		}

		method : public : Empty() ~ Nil {
			@values := Int->New[8];
			@size := 0;
		}
		
		method : public : native : Average() ~ Int {
			if(@size <= 0) {
				return 0;
			};
			
			total := 0;
			for(i : Int := 0; i < @size; i += 1;) {
				total := total + @values[i];
			};
			
			return total / @size;
		}
		
		method : public : native : Min() ~ Int {
			if(@size <= 0) {
				return 0;
			};
			
			if(@size = 1) {
				return @values[0];
			};
			
			min := @values[0];
			for(i : Int := 1; i < @size; i += 1;) {
				if(@values[i] < min) {
					min := @values[i];
				};
			};
			
			return min;
		}
		
		method : public : native : Max() ~ Int {
			if(@size <= 0) {
				return 0;
			};
			
			if(@size = 1) {
				return @values[0];
			};
			
			max := @values[0];
			for(i : Int := 1; i < @size; i += 1;) {
				if(@values[i] > max) {
					max := @values[i];
				};
			};
			
			return max;
		}
		
		method : public : native : Sort() ~ Nil {
			a : Int[] := @values;
			b : Int[] := Int->New[@size];
			MergeSort(0, @size - 1, a, b);
		}
		
		method : native : MergeSort(low : Int, hi : Int, a : Int[], b : Int[]) ~ Nil {
			if(low < hi) {
				mid := (low + hi) / 2;
				MergeSort(low, mid, a, b);
				MergeSort(mid + 1, hi, a, b);
				Merge(low, mid, hi, a, b);
			};	
		}
		
		method : native : Merge(low : Int, mid : Int, hi : Int, a : Int[], b : Int[]) ~ Nil {
			# copy both halves of a to auxiliary array b
			for(i := low; i <= hi; i += 1;) {
				b[i] := a[i];
			};

			i := low; 
			j := mid + 1; 
			k := low;
			
			# copy back next-greatest element at each time
			while(i <= mid & j <= hi) {
				if(b[i] <= b[j]) {
					a[k] := b[i];
					k := k + 1;
					i += 1;
				}
				else {
					a[k] := b[j];
					k := k + 1;
					j := j + 1;
				};
			};
			
			# copy back remaining elements of first half (if any)
			while(i <= mid) {
				a[k] := b[i];
				k := k + 1;
				i += 1;
			};
		}
		
		method : public : native : Find(value : Int) ~ Int {
			for(i := 0; i < @size; i += 1;) {
				if(@values[i] = value) {
					return i;
				};
			};

			return -1;
		}

		method : public : native : BinarySearch(value : Int) ~ Int {
			low := 0;
			high := @size - 1;

			while(low <= high) {
				mid := (low + high) / 2;
      	
				if(@values[mid] > value) {
					high := mid - 1;
				}
				else if(@values[mid] < value) {
					low := mid + 1;
				}
				else {
					return mid;
				};
			};

			return -1;
		}
		
		method : public : native : ToArray() ~ Int[] {
			array : Int[] := Int->New[@size];
			Runtime->Copy(array, 0, @values, 0, @size);
			return array;
		}
		
		method : public : Has(value : Int) ~ Bool {
			for(i : Int := 0; i < @size; i += 1;) {
				if(@values[i] = value) {
					return true;
				};
			};
			
			return false;
		}
		
		method : public : Filter(f : (Int) ~ Bool) ~ IntVector {
			filtered := IntVector->New();
			
			for(i : Int := 0; i < @size; i += 1;) {
				if(f(@values[i])) {
					filtered->AddBack(@values[i]);
				};
			};
			
			return filtered;
		}
		
		method : public : Apply(f : (Int) ~ Int) ~ IntVector {
			array : Int[] := Int->New[@size];
			for(i : Int := 0; i < @size; i += 1;) {
				array[i] := @values[i];
			};
			
			for(i : Int := 0; i < @size; i += 1;) {
			  array[i] := f(array[i]);
			};
      
			return IntVector->New(array);
		}
	}
	
	class FloatVector {
		@values : Float[];
		@size : Int;
		
		New() {
			@values := Float->New[8];
			@size := 0;
		}

		New(values : FloatVector) {
			@values := values->ToArray();
			@size := values->Size();
		}

		New(values : Float[]) {
			@values := Float->New[values->Size() + values->Size() / 2];
			@size := values->Size();
			Runtime->Copy(@values, 0, values, 0, @size);
		}

		method : native : Expand() ~ Nil {
			if(@size >= @values->Size()) {
				temp : Float[] := Float->New[@size * 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
		}

		method : public : AddBack(values : FloatVector) ~ Nil {
			max := values->Size() + @size;
			if(max >= @values->Size()) {
				temp : Float[] := Float->New[max + max / 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
			
			temp := values->ToArray();
			Runtime->Copy(@values, @size, temp, 0, temp->Size());
			@size := max;
		}

		method : public : AddBack(value : Float) ~ Nil {
			Expand();
			@values[@size] := value;
			@size := @size + 1;
		}

		method : public : RemoveBack() ~ Float {
			if(@size > 0) {
				@size -= 1;
				return @values[@size];
			};
	
			return 0.0;
		}
		
		method : public : Remove(i : Int) ~ Float {
			if(i > -1 & i < @size) {
				temp := Float->New[@values->Size()];
				Runtime->Copy(temp, 0, @values, 0, i);
				Runtime->Copy(temp, i, @values, i + 1, @size - i - 1);
				value := @values[i];
				@values := temp;
				@size -= 1;
				return value;
			};
			
			return 0.0;
		}

		method : public : Get(index : Int) ~ Float {
			if(index > -1 & index < @size) {
				return @values[index];
			};

			return 0.0;
		}

		method : public : Set(value : Float, index : Int) ~ Bool {
			if(index > -1 & index < @size) {
				@values[index] := value;
				return true;
			};
			
			return false;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}

		method : public : Empty() ~ Nil {
			@values := Float->New[8];
			@size := 0;
		}

		method : public : native : Average() ~ Float {
			if(@size <= 0) {
				return 0.0;
			};
			
			total := 0.0;
			for(i : Int := 0; i < @size; i += 1;) {
				total := total + @values[i];
			};
			
			return total / @size;
		}
		
		method : public : native : Min() ~ Float {
			if(@size <= 0) {
				return 0.0;
			};
			
			if(@size = 1) {
				return @values[0];
			};
			
			min := @values[0];
			for(i : Int := 1; i < @size; i += 1;) {
				if(@values[i] < min) {
					min := @values[i];
				};
			};
			
			return min;
		}
		
		method : public : native : Max() ~ Float {
			if(@size <= 0) {
				return 0.0;
			};
			
			if(@size = 1) {
				return @values[0];
			};
			
			max := @values[0];
			for(i : Int := 1; i < @size; i += 1;) {
				if(@values[i] > max) {
					max := @values[i];
				};
			};
			
			return max;
		}
		
		method : public : native : Sort() ~ Nil {
			a : Float[] := @values;
			b : Float[] := Float->New[@size];
			MergeSort(0, @size - 1, a, b);
		}
		
		method : native : MergeSort(low : Int, hi : Int, a : Float[], b : Float[]) ~ Nil {
			if(low < hi) {
				mid := (low + hi) / 2;
				MergeSort(low, mid, a, b);
				MergeSort(mid + 1, hi, a, b);
				Merge(low, mid, hi, a, b);
			};	
		}
		
		method : native : Merge(low : Int, mid : Int, hi : Int, a : Float[], b : Float[]) ~ Nil {
			# copy both halves of a to auxiliary array b
			for(i := low; i <= hi; i += 1;) {
				b[i] := a[i];
			};

			i := low; 
			j := mid + 1; 
			k := low;
			
			# copy back next-greatest element at each time
			while(i <= mid & j <= hi) {
				if(b[i] <= b[j]) {
					a[k] := b[i];
					k := k + 1;
					i += 1;
				}
				else {
					a[k] := b[j];
					k := k + 1;
					j := j + 1;
				};
			};
			
			# copy back remaining elements of first half (if any)
			while(i <= mid) {
				a[k] := b[i];
				k := k + 1;
				i += 1;
			};
		}

		method : public : native : Find(value : Float) ~ Int {
         for(i := 0; i < @size; i += 1;) {
            if(@values[i] = value) {
               return i;
            };
         };

         return -1;
      }
		
		method : public : native : BinarySearch(value : Float) ~ Int {
			low := 0;
			high := @size - 1;

			while(low <= high) {
				mid := (low + high) / 2;
      	
				if(@values[mid] > value) {
					high := mid - 1;
				}
				else if(@values[mid] < value) {
					low := mid + 1;
				}
				else {
					return mid;
				};
			};

			return -1;
		}

		method : public : native : ToArray() ~ Float[] {
			array : Float[] := Float->New[@size];
			Runtime->Copy(array, 0, @values, 0, @size);
			return array;
		}
		
		method : public : Has(value : Float) ~ Bool {
		  for(i : Int := 0; i < @size; i += 1;) {
			  if(@values[i] = value) {
			    return true;
			   };
			};
			
			return false;
		}
		
		method : public : Filter(f : (Float) ~ Bool) ~ FloatVector {
			filtered := FloatVector->New();
			
			for(i : Int := 0; i < @size; i += 1;) {
				if(f(@values[i])) {
					filtered->AddBack(@values[i]);
				};
			};
			
			return filtered;
		}

		method : public : Apply(f : (Float) ~ Float) ~ FloatVector {
			array : Float[] := Float->New[@size];
			Runtime->Copy(array, 0, @values, 0, @size);
			
			for(i : Int := 0; i < @size; i += 1;) {
			  array[i] := f(array[i]);
			};
      
			return FloatVector->New(array);
		}
	}
	
	class CompareVector {
		@values : Compare[];
		@size : Int;
		
		New() {
			@values := Compare->New[8];
			@size := 0;
		}

		New(values : Compare[]) {
			@values := Compare->New[values->Size() + values->Size() / 2];
			@size := values->Size();
			Runtime->Copy(@values, 0, values, 0, @size);
 		}

		New(values : CompareVector) {
			@values := values->ToArray();
			@size := values->Size();
		}

		method : native : Expand() ~ Nil {
			if(@size >= @values->Size()) {
				temp : Compare[] := Compare->New[@size * 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
		}

		method : public : AddBack(values : CompareVector) ~ Nil {
			max := values->Size() + @size;
			if(max >= @values->Size()) {
				temp : Compare[] := Compare->New[max + max / 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
			
			temp := values->ToArray();
			Runtime->Copy(@values, @size, temp, 0, temp->Size());
			@size := max;
		}

		method : public : AddBack(value : Compare) ~ Nil {
			Expand();
			@values[@size] := value;
			@size := @size + 1;
		}

		method : public : RemoveBack() ~ Compare {
			if(@size > 0) {
				@size -= 1;
				return @values[@size];
			};
	
			return Nil;
		}
		
		method : public : Remove(i : Int) ~ Compare {
			if(i > -1 & i < @size) {
				temp := Compare->New[@values->Size()];
				Runtime->Copy(temp, 0, @values, 0, i);
				Runtime->Copy(temp, i, @values, i + 1, @size - i - 1);
				value := @values[i];
				@values := temp;
				@size -= 1;
				return value;
			};
			
			return Nil;
		}

		method : public : Get(index : Int) ~ Compare {
			if(index > -1 & index < @size) {
				return @values[index];
			};

			return Nil;
		}

		method : public : Set(value : Compare, index : Int) ~ Bool {
			if(index > -1 & index < @size) {
				@values[index] := value;
				return true;
			};
			
			return false;
		}

		method : public : Empty() ~ Nil {
			@values := Compare->New[8];
			@size := 0;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}
		
		method : public : IsEmpty() ~ Bool {
			return @size = 0;
		}
				
		method : public : native : Sort() ~ Nil {
			a : Compare[] := @values;
			b : Compare[] := Compare->New[@size];
			MergeSort(0, @size - 1, a, b);
		}
		
		method : native : MergeSort(low : Int, hi : Int, a : Compare[], b : Compare[]) ~ Nil {
			if(low < hi) {
				mid := (low + hi) / 2;
				MergeSort(low, mid, a, b);
				MergeSort(mid + 1, hi, a, b);
				Merge(low, mid, hi, a, b);
			};	
		}
		
		method : native : Merge(low : Int, mid : Int, hi : Int, a : Compare[], b : Compare[]) ~ Nil {
			# copy both halves of a to auxiliary array b
			for(i := low; i <= hi; i += 1;) {
				b[i] := a[i];
			};

			i := low; 
			j := mid + 1; 
			k := low;
			
			# copy back next-greatest element at each time
			while(i <= mid & j <= hi) {
				if(b[i]->Compare(b[j]) < 0 | b[i]->Compare(b[j]) = 0) {
					a[k] := b[i];
					k := k + 1;
					i += 1;
				}
				else {
					a[k] := b[j];
					k := k + 1;
					j := j + 1;
				};
			};
			
			# copy back remaining elements of first half (if any)
			while(i <= mid) {
				a[k] := b[i];
				k := k + 1;
				i += 1;
			};
		}

		method : public : native : Find(value : Compare) ~ Int {
         for(i := 0; i < @size; i += 1;) {
            if(@values[i]->Compare(value) = 0) {
               return i;
            };
         };

         return -1;
      }
		
		method : public : native : BinarySearch(value : Compare) ~ Int {
			low := 0;
			high := @size - 1;

			while(low <= high) {
				mid := (low + high) / 2;
      	
				if(@values[mid]->Compare(value) > 0) {
					high := mid - 1;
				}
				else if(@values[mid]->Compare(value) < 0) {
					low := mid + 1;
				}
				else {
					return mid;
				};
			};

			return -1;
		}
		
		method : public : Has(value : Compare) ~ Bool {
			for(i : Int := 0; i < @size; i += 1;) {
				if(@values[i]->Compare(value) = 0) {
					return true;
				};
			};
			
			return false;
		}
		
		method : public : Filter(f : (Compare) ~ Bool) ~ CompareVector {
			filtered := CompareVector->New();
			
			for(i : Int := 0; i < @size; i += 1;) {
				if(f(@values[i])) {
					filtered->AddBack(@values[i]);
				};
			};
			
			return filtered;
		}
		
		method : public : native : ToArray() ~ Compare[] {
			array : Compare[] := Compare->New[@size];
			Runtime->Copy(array, 0, @values, 0, @size);
			return array;
		}
	}
	
	class Vector {
		@values : Base[];
		@size : Int;
		
		New() {
			@values := Base->New[8];
			@size := 0;
		}

		New(values : Base[]) {
			@values := Base->New[values->Size() + values->Size() / 2];
			@size := values->Size();
			Runtime->Copy(@values, 0, values, 0, @size);
		}

		New(values : Vector) {
			@values := values->ToArray();
			@size := values->Size();
		}

		method : native : Expand() ~ Nil {
			if(@size >= @values->Size()) {
				temp : Base[] := Base->New[@size * 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
		}

		method : public : AddBack(values : Vector) ~ Nil {
			max := values->Size() + @size;
			if(max >= @values->Size()) {
				temp : Base[] := Base->New[max + max / 2];
				Runtime->Copy(temp, 0, @values, 0, @size);
				@values := temp;
			};
			
			temp := values->ToArray();
			Runtime->Copy(@values, @size, temp, 0, temp->Size());
			@size := max;
		}

		method : public : AddBack(value : Base) ~ Nil {
			Expand();
			@values[@size] := value;
			@size := @size + 1;
		}

		method : public : RemoveBack() ~ Base {
			if(@size > 0) {
				@size -= 1;
				return @values[@size];
			};
	
			return Nil;
		}
		
		method : public : Remove(i : Int) ~ Base {
			if(i > -1 & i < @size) {
				temp := Base->New[@values->Size()];
				Runtime->Copy(temp, 0, @values, 0, i);
				Runtime->Copy(temp, i, @values, i + 1, @size - i - 1);
				value := @values[i];
				@values := temp;
				@size -= 1;
				return value;
			};
			
			return Nil;
		}

		method : public : Get(index : Int) ~ Base {
			if(index > -1 & index < @size) {
				return @values[index];
			};

			return Nil;
		}

		method : public : Set(value : Base, index : Int) ~ Bool {
			if(index > -1 & index < @size) {
				@values[index] := value;
				return true;
			};
			
			return false;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}
		
		method : public : IsEmpty() ~ Bool {
			return @size = 0;
		}

		method : public : Empty() ~ Nil {
			@values := Base->New[8];
			@size := 0;
		}

		method : public : native : ToArray() ~ Base[] {
			array : Base[] := Base->New[@size];
			Runtime->Copy(array, 0, @values, 0, @size);
			return array;
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~
	# Stacks
	~~~~~~~~~~~~~~~~~~~~~~~#
	class IntStack {
		@values : IntVector;
		
		New() {
			@values := IntVector->New();
		}
		
		method : public: native : Push(value : Int) ~ Nil {
			@values->AddBack(value);
		}
		
		method : public: native : Pop() ~ Int {
			if(@values->Size() > 0) {
				value : Int := @values->Get(@values->Size() - 1);
				@values->RemoveBack();
				
				return value;
			};
			
			return 0;
		}
		
		method : public: native : Top() ~ Int {
			if(@values->Size() > 0) {
				return @values->Get(@values->Size() - 1);
			};
			
			return 0;
		}

		method : public : Empty() ~ Nil {
			@values->Empty();
		}
		
		method : public: IsEmpty() ~ Bool {
			return @values->Size() = 0;
		}
		
		method : public: Size() ~ Int {
			return @values->Size();
		}
	}

	class FloatStack {
		@values : FloatVector;
		
		New() {
			@values := FloatVector->New();
		}
		
		method : public : native : Push(value : Float) ~ Nil {
			@values->AddBack(value);
		}
		
		method : public: native : Pop() ~ Float {
			if(@values->Size() > 0) {
				value : Float := @values->Get(@values->Size() - 1);
				@values->RemoveBack();
				
				return value;
			};
			
			return 0.0;
		}
		
		method : public: native : Top() ~ Float {
			if(@values->Size() > 0) {
				return @values->Get(@values->Size() - 1);
			};
			
			return 0.0;
		}
		
		method : public: Size() ~ Int {
			return @values->Size();
		}

		method : public : Empty() ~ Nil {
			@values->Empty();
		}
		
		method : public: IsEmpty() ~ Bool {
			return @values->Size() = 0;
		}
	}
	
	# stacks
	class Stack {
		@values : Vector;
		
		New() {
			@values := Vector->New();
		}
		
		method : public: native : Push(value : Base) ~ Nil {
			@values->AddBack(value);
		}
		
		method : public : native : Pop() ~ Base {
			if(@values->Size() > 0) {
				value : Base := @values->Get(@values->Size() - 1);
				@values->RemoveBack();
				
				return value;
			};
			
			return Nil;
		}
		
		method : public: native : Top() ~ Base {
			if(@values->Size() > 0) {
				return @values->Get(@values->Size() - 1);
			};
			
			return Nil;
		}

		method : public : Empty() ~ Nil {
			@values->Empty();
		}
		
		method : public: IsEmpty() ~ Bool {
			return @values->Size() = 0;
		}

		method : public: Size() ~ Int {
			return @values->Size();
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~
	# Lists
	~~~~~~~~~~~~~~~~~~~~~~~#
	class IntList {
		@list : List;
		
		New() {
			@list := List->New();
		}

		method : public : AddBack(value : Int) ~ Nil {
			@list->AddBack(IntHolder->New(value));
		}

		method : public : AddFront(value : Int) ~ Nil {
			@list->AddFront(IntHolder->New(value));
		}

		method : public : Get() ~ Int {
			return @list->Get()->As(IntHolder)->Get();
		}
		
		method : public : Find(value : Int) ~ Bool {
			return @list->Find(IntHolder->New(value)) <> Nil;
		}
		
		method : public : Insert(value : Int) ~ Nil {
			@list->Insert(IntHolder->New(value));
		}

		method : public : RemoveBack() ~ Nil {
			@list->RemoveBack();
		}
		
		method : public : RemoveFront() ~ Nil {
			@list->RemoveFront();
		}
		
		method : public : Rewind() ~ Nil {
			@list->Rewind();
		}
		
		method : public : Forward() ~ Nil {
			@list->Forward();
		}
		
		method : public : Next() ~ Nil {
			@list->Next();
		}
		
		method : public : Previous() ~ Nil {
			@list->Previous();
		}
		
		method : public : Remove() ~ Nil {
			@list->Remove();
		}
		
		method : public : IsFront() ~ Bool {
			return @list->IsFront();
		}	
		
		method : public : IsBack() ~ Bool {
			return @list->IsBack();
		}
		
		method : public : More() ~ Bool {
			return @list->More();
		}

		method : public : Front() ~ Int {
			holder := @list->Front()->As(IntHolder);
			if(holder <> Nil) {
				return holder->Get();
			};

			return 0;
		}

		method : public : Back() ~ Int {
			holder := @list->Back()->As(IntHolder);
			if(holder <> Nil) {
				return holder->Get();
			};

			return 0;
		}
		
		method : public : Empty() ~ Nil {
			@list->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @list->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @list->Size();
		}
	}

	class FloatList {
		@list : List;
		
		New() {
			@list := List->New();
		}

		method : public : AddBack(value : Float) ~ Nil {
			@list->AddBack(FloatHolder->New(value));
		}

		method : public : AddFront(value : Float) ~ Nil {
			@list->AddFront(FloatHolder->New(value));
		}

		method : public : Get() ~ Float {
			return @list->Get()->As(FloatHolder)->Get();
		}
		
		method : public : Find(value : Float) ~ Bool {
			return @list->Find(FloatHolder->New(value)) <> Nil;
		}
		
		method : public : Insert(value : Float) ~ Nil {
			@list->Insert(FloatHolder->New(value));
		}
		
		method : public : RemoveBack() ~ Nil {
			@list->RemoveBack();
		}
		
		method : public : RemoveFront() ~ Nil {
			@list->RemoveFront();
		}
		
		method : public : Rewind() ~ Nil {
			@list->Rewind();
		}
		
		method : public : Forward() ~ Nil {
			@list->Forward();
		}
		
		method : public : Next() ~ Nil {
			@list->Next();
		}
		
		method : public : Previous() ~ Nil {
			@list->Previous();
		}
		
		method : public : Remove() ~ Nil {
			@list->Remove();
		}
		
		method : public : IsFront() ~ Bool {
			return @list->IsFront();
		}	
		
		method : public : IsBack() ~ Bool {
			return @list->IsBack();
		}
		
		method : public : More() ~ Bool {
			return @list->More();
		}

		method : public : Front() ~ Int {
			holder := @list->Front()->As(FloatHolder);
			if(holder <> Nil) {
				return holder->Get();
			};

			return 0.0;
		}	

		method : public : Back() ~ Int {
			holder := @list->Back()->As(FloatHolder);
			if(holder <> Nil) {
				return holder->Get();
			};

			return 0.0;
		}

		method : public : Empty() ~ Nil {
			@list->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @list->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @list->Size();
		}
	}

	class List {
		@size : Int;
		@head : ListNode;
		@tail : ListNode;
		@cursor : ListNode;

		New() {
			@size := 0;
		}

		method : public : native : AddBack(value : Compare) ~ Nil {
			node := ListNode->New(value);
			if(@head = Nil) {
				@head := node;
				@tail := @head;
				@cursor := @head;
			}
			else {
				@tail->SetNext(node);
			 	node->SetPrevious(@tail);	
				@tail := node;
			};
			@size += 1;
		}
	
		method : public : RemoveBack() ~ Nil {
			Forward();
			Remove();
		}

		method : public : native : AddFront(value : Compare) ~ Nil {
			node := ListNode->New(value);
			if(@head = Nil) {
				@head := node;
				@tail := @head;
				@cursor := @head;
			}
			else {
				@head->SetPrevious(node);
				node->SetNext(@head);
				@head := node;
				@cursor := @head;
			};
			@size += 1;
		}
		
		method : public : RemoveFront() ~ Nil {
			Rewind();
			Remove();
		}

		method : public : Rewind() ~ Nil {
			@cursor := @head;
		}		

		method : public : Forward() ~ Nil {
			@cursor := @tail;
		}		

		method : public : Next() ~ Nil {
			if(@cursor <> Nil) {
				@cursor := @cursor->GetNext();
			};
		}

		method : public : Previous() ~ Nil {
			if(@cursor <> Nil) {
				@cursor := @cursor->GetPrevious();
			};
		}

		method : public : Get() ~ Compare {
			if(@cursor <> Nil) {
				return @cursor->Get();
			};

			return Nil;
		}

		method : public : Has(value : Compare) ~ Bool {
			start := @head;
			end := @tail;
			
			while(start <> end) {
				if(value->Compare(start->Get()) = 0) {
					return true;
				}
				else if(value->Compare(end->Get()) = 0) {
					return true;
				};
				
				start := start->GetNext();
				end := end->GetPrevious();
			};
			
			if(start <> Nil & value->Compare(start->Get()) = 0) {
				return true;
			}; 

			return false;
		}
		
		method : public : Find(value : Compare) ~ Compare {
			@cursor := @head;
			while(@cursor <> Nil) {
				if(value->Compare(@cursor->Get()) = 0) {
					return value;
				};
				@cursor := @cursor->GetNext();
			};
			
			return Nil;
		}
		
		method : public : native : Insert(value : Compare) ~ Bool {
			if(@cursor <> Nil & @head <> Nil & @tail <> Nil) {
				node := ListNode->New(value);
				if(@cursor = @head & @cursor = @tail) {
			 		@head->SetNext(node);
			 		node->SetPrevious(@head);
			 		@tail := node;
			 	}
			 	else if(@cursor = @tail) {
			 		@tail->SetNext(node);
			 		node->SetPrevious(@tail);
			 		@tail := node;
			 	}
			 	else {
					@cursor->GetNext()->SetPrevious(node);
					node->SetNext(@cursor->GetNext());
			 		@cursor->SetNext(node);
			 		node->SetPrevious(@cursor);
			 	};
			 	@size += 1;
				
				return true;
			}
			else if(@head = Nil & @tail = Nil) {
				AddBack(value);
				return true;
			};
			
			return false;
		}
		
		method : public : native : Remove() ~ Nil {
			if(@cursor <> Nil) {
				if(@cursor->GetPrevious() <> Nil) {
					@cursor->GetPrevious()->SetNext(@cursor->GetNext());
				};
				if(@cursor = @head & @cursor = @tail) {
			 		@cursor := @cursor->GetNext();
			 		@head := @cursor;
			 		@tail := @cursor;
			 	}
			 	else if(@cursor = @head) {
			 		@cursor := @cursor->GetNext();
			 		@head := @cursor;
			 	}
			 	else if(@cursor = @tail) {
			 		@cursor := @cursor->GetNext();
			 		@tail := @cursor;
			 	}
			 	else {
			 		@cursor := @cursor->GetNext();
			 	};
				@size -= 1;
			};
		}

		method : public : IsFront() ~ Bool {
			return @cursor = @head;
		}		
		
		method : public : IsBack() ~ Bool {
			return @cursor = @tail;
		}
		
		method : public : More() ~ Bool {
			return @cursor <> Nil;
		}

		method : public : Front() ~ Compare {
			if(@head <> Nil) {
				return @head->Get();
			};

			return Nil;
		}

		method : public : Back() ~ Compare {
			if(@tail <> Nil) {
				return @tail->Get();
			};

			return Nil;
		}

		method : public : Empty() ~ Nil {
			@size := 0;
			@head := Nil;
			@tail := Nil;
			@cursor := Nil;
		}
		
		method : public : IsEmpty() ~ Bool {
			return @size = 0;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}
	}
	
	class ListNode {
		@value : Compare;
		@next : ListNode;
		@previous: ListNode;

		New(value : Compare) {
			@value := value;
		}
		
		method : public : Set(value : Compare) ~ Nil {
			@value := value;
		}
	
		method : public : Get() ~ Compare {
			return @value;
		}

		method : public : SetNext(next :  Collection.ListNode) ~ Nil {
			@next := next;
		}
	
		method : public : GetNext() ~ ListNode {
			return @next;
		}

		method : public : SetPrevious(previous :  Collection.ListNode) ~ Nil {
			@previous := previous;
		}
	
		method : public : GetPrevious() ~ ListNode {
			return @previous;
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~
	# queues
	~~~~~~~~~~~~~~~~~~~~~~~#
	class FloatQueue {
		@queue : FloatList;
		
		New() {
			@queue := FloatList->New();
		}
		
		method : public: native : Add(value : Float) ~ Nil {
			@queue->AddBack(value);
		}
		
		method : public : native : Remove() ~ Float {
			if(@queue->Size() > 0) {
                value := @queue->Front();
				@queue->RemoveFront();
                return value;
			};
			
			return 0.0;
		}
		
		method : public: native : Head() ~ Float {
			if(@queue->Size() > 0) {
				return @queue->Front();
			};
			
			return 0.0;
		}
		
		method : public : Empty() ~ Nil {
			@queue->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @queue->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @queue->Size();
		}
	}
	
	class IntQueue {
		@queue : IntList;
		
		New() {
			@queue := IntList->New();
		}
		
		method : public: native : Add(value : Int) ~ Nil {
			@queue->AddBack(value);
		}
		
		method : public : native : Remove() ~ Int {
			if(@queue->Size() > 0) {
                value := @queue->Front();				
                @queue->RemoveFront();
                return value;
			};
			
			return 0;
		}
		
		method : public: native : Head() ~ Int {
			if(@queue->Size() > 0) {
				return @queue->Front();
			};
			
			return 0;
		}
		
		method : public : Empty() ~ Nil {
			@queue->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @queue->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @queue->Size();
		}
	}
    
	class Queue {
		@queue : List;
		
		New() {
			@queue := List->New();
		}
		
		method : public: native : Add(value : Compare) ~ Nil {
			@queue->AddBack(value);
		}
		
		method : public : native : Remove() ~ Compare {
			if(@queue->Size() > 0) {
				value := @queue->Front();
				@queue->RemoveFront();
				return value;
			};
			
			return Nil;
		}
		
		method : public: native : Head() ~ Compare {
			if(@queue->Size() > 0) {
				return @queue->Front();
			};
			
			return Nil;
		}
		
		method : public : Empty() ~ Nil {
			@queue->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @queue->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @queue->Size();
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~
	# Maps
	~~~~~~~~~~~~~~~~~~~~~~~#
	class IntMap {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : Int, value : Base) ~ Nil {
			@map->Insert(IntHolder->New(key), value);
		}
		
		method : public : Remove(key : Int) ~ Nil {
			@map->Remove(IntHolder->New(key));
		}
    
		method : public : Find(key : Int) ~ Base {
			result : Base := @map->Find(IntHolder->New(key));
			if(result <> Nil) {
				return result;
			};

			return Nil;
		}
		
		method : public : Has(key : Int) ~ Bool {
			result : IntHolder := @map->Find(IntHolder->New(key))->As(IntHolder);
			return result <> Nil;
		}
    
		method : public : native : GetKeys() ~ IntVector {
			keys := IntVector->New();
			holder_keys := @map->GetKeys();
			for(i := 0; i < keys->Size(); i += 1;) {
				holder_value : IntHolder := holder_keys->Get(i)->As(IntHolder);
				keys->AddBack(holder_value->Get());   
			};

			return keys;
		}
    
		method : public : GetValues() ~ Vector {
			return @map->GetValues();
		}

		method : public : Empty() ~ Nil {
			@map->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}
		
		method : public : Size() ~ Int {
			return @map->Size();
		}

		method : public : GetMap() ~ Map {
			return @map;
		}
	}
	
	class FloatMap {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : Float, value : Base) ~ Nil {
			@map->Insert(FloatHolder->New(key), value);
		}
		
		method : public : Remove(key : Float) ~ Nil {
			@map->Remove(FloatHolder->New(key));
		}
    
		method : public : Find(key : Float) ~ Float {
			result : FloatHolder := @map->Find(FloatHolder->New(key))->As(FloatHolder);
			if(result <> Nil) {
				return result->Get();
			};

			return 0.0;
		}
		
		method : public : Has(key : Float) ~ Bool {
			result : FloatHolder := @map->Find(FloatHolder->New(key))->As(FloatHolder);
			return result <> Nil;
		}
    
		method : public: native : GetKeys() ~ FloatVector {
			keys := FloatVector->New();
			holder_keys := @map->GetKeys();
			for(i := 0; i < keys->Size(); i += 1;) {
				holder_value : FloatHolder := holder_keys->Get(i)->As(FloatHolder);
				keys->AddBack(holder_value->Get());   
			};

			return keys;
		}
    
		method : public : GetValues() ~ Vector {
			return @map->GetValues();
		}

		method : public : Empty() ~ Nil {
			@map->Empty();
		}
		
		method : public : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}

		method : public : Size() ~ Int {
			return @map->Size();
		}

		method : public : GetMap() ~ Map {
			return @map;
		}
	}
	
	class TreeNode {
		@key : Compare;
		@value : Base;
		@left : TreeNode;
		@right : TreeNode;
		@level : Int;
		
		New(key : Compare, value : Base, level : Int) {
			@key := key;
			@value := value;
			@level := level;
			@left := Nil;
			@right := Nil;
		}

		method : public : SetKey(key : Compare) ~ Nil {
			@key := key;
		}
		
		method : public : GetKey() ~ Compare {
			return @key;
		}

		method : public : Get() ~ Base {
			return @value;
		}
		
		method : public : GetLevel() ~ Int {
			return @level;
		}

		method : public : SetLevel(level : Int) ~ Nil {
			@level := level;
		}

		method : public : GetLeft() ~ TreeNode {
			return @left;
		}

		method : public : SetLeft(left : TreeNode) ~ Nil {
			@left := left;
		}

		method : public : GetRight() ~ TreeNode {
			return @right;
		}

		method : public : SetRight(right : TreeNode) ~ Nil {
			@right := right;
		}
	}

	class Pair {
		@key : Compare;
		@value : Base;

		New(key : Compare, value : Base) {
			@key := key;
			@value := value;
		}

		method : public : GetKey() ~ Compare {
			return @key;
		}

		method : public : Get() ~ Base {
			return @value;
		}
	}

	class StringMap {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : String, value : Base) ~ Nil {
			@map->Insert(key, value);
		}
		
		method : public : Remove(key : String) ~ Nil {
			@map->Remove(key);
		}
    
		method : public : Find(key : String) ~ Base {
			return @map->Find(key);
		}
		
		method : public : Has(key : String) ~ Bool {
			result := @map->Find(key);
			return result <> Nil;
		}
    
		method : public : GetKeys() ~ Vector {
			return @map->GetKeys();
		}

		method : public : GetValues() ~ Vector {
			return @map->GetValues();
		}

		method : public : native : Empty() ~ Nil {
			@map->Empty();
		}

		method : public : native : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}
		
		method : public : native : Size() ~ Int {
			return @map->Size();
		}
	}
	
	class Map {
		@root : TreeNode;
		@last : TreeNode;
		@Removed : TreeNode;
		@size : Int;
		@found : Bool;

		New() {
			@root := Nil;
			@size := 0;	
		}		

		method : native : Skew(node :  Collection.TreeNode) ~ TreeNode {
			if(node = Nil | node->GetLeft() = Nil) {
				return node;
			};
				
			if(node->GetLeft()->GetLevel() = node->GetLevel()) {
				left : TreeNode := node->GetLeft();
				node->SetLeft(left->GetRight());
				left->SetRight(node);
				return left;
			};
			
			return node;
		}

		method : public : native : Size() ~ Int {
			return @size;
		}
		
		method : public : native : IsEmpty() ~ Bool {
			return @size = 0;
		}

		method : public : native : Empty() ~ Nil {
			@root := Nil;
			@last := Nil;
			@Removed := Nil;
			@size := 0;
			@found := false;
		}
		
		method : native : Split(node :  Collection.TreeNode) ~ TreeNode {
			if(node = Nil | node->GetRight() = Nil | 
					node->GetRight()->GetRight() = Nil) {
				return node;
			};

			if(node->GetRight()->GetRight()->GetLevel() = node->GetLevel()) {
				right : TreeNode := node->GetRight();
				node->SetRight(right->GetLeft());
				right->SetLeft(node);
				right->SetLevel(right->GetLevel() + 1);
				
				return right;
			};
			
			return node;
		}
		
		method : public : Find(key : Compare) ~ Base {
			return Find(key, @root);
		}
		
		method : public : Has(key : Compare) ~ Bool {
			return Find(key, @root) <> Nil;
		}
		
		method : Find(key : Compare, node :  Collection.TreeNode) ~ Base {
			if(node <> Nil) {
				if(key->Compare(node->GetKey()) < 0) {
					return Find(key, node->GetLeft());
				}
				else if(key->Compare(node->GetKey()) > 0) {
					return Find(key, node->GetRight());
				}
				else {
					return node->Get();		
				};
			};
			
			return Nil;
		}
		
		method : public : GetKeys() ~  Collection.Vector {
			vector := Vector->New();
			GetKeys(@root, vector);
			return vector;
		}
		
		method : native : GetKeys(node :  Collection.TreeNode, vector :  Collection.Vector) ~ Nil {
			if(node <> Nil) {
				# process left 
				GetKeys(node->GetLeft(), vector);
				
				key : Compare := node->GetKey();
				vector->AddBack(key);
				
				# process right
				GetKeys(node->GetRight(), vector);
			};
		}
		
		method : public : GetValues() ~  Collection.Vector {
			vector := Vector->New();
			GetValues(@root, vector);
			return vector;
		}

		method : native : GetValues(node :  Collection.TreeNode, vector :  Collection.Vector) ~ Nil {
			if(node <> Nil) {
				# process left 
				GetValues(node->GetLeft(), vector);
				
				value : Base := node->Get();
				vector->AddBack(value);
				
				# process right
				GetValues(node->GetRight(), vector);
			};
		}
		
		method : public : native : Insert(key : Compare, value : Base) ~ Nil {
			if(@root = Nil) {
				@root := Insert(key, value, Nil->As( Collection.TreeNode));
			}
			else {
				@root := Insert(key, value, @root);
			};
		}
		
		method : native : Insert(key : Compare, value : Base, node :  Collection.TreeNode) ~  Collection.TreeNode {
			if(node = Nil) {
				node := TreeNode->New(key, value, 1);
				@size := @size + 1;
			}
			else {
				if(key->Compare(node->GetKey()) < 0) {
					node->SetLeft(Insert(key, value, node->GetLeft()));
				}
				else if(key->Compare(node->GetKey()) > 0) {
					node->SetRight(Insert(key, value, node->GetRight()));
				}
				else {
					return node;		
				};
				node := Skew(node);
				node := Split(node);
			};	
			
			return node;
		}

		method : public : Remove(key : Compare) ~ Nil {
			@found := true;
			@root := Remove(key, @root);
			if(@found) {
				@size := @size - 1;
			};
		}
		
		method : native : Remove(key : Compare, node :  Collection.TreeNode) ~  Collection.TreeNode {
			if(node = Nil) {
				@found := false;
				return Nil;
			};

			if(key->Compare(node->GetKey()) < 0) {
				node->SetLeft(Remove(key, node->GetLeft()));
			}
			else if(key->Compare(node->GetKey()) > 0) {
				node->SetRight(Remove(key, node->GetRight()));
			}
			else {
				if(node->GetLeft() = Nil & node->GetRight() = Nil) {
					return Nil;
				}
				else if(node->GetLeft() = Nil) {
					left : Compare := Successor(node);
					node->SetRight(Remove(left, node->GetRight()));
					node->SetKey(left);
				} 
				else {
					left : Compare := Predecessor(node);
					node->SetLeft(Remove(left, node->GetLeft()));
					node->SetKey(left);
				};
				
			};
			
			# rebalanced
			node := DecreaseLevel(node);				
			node := Skew(node);
			node->SetRight(Skew(node->GetRight()));
			if(node->GetRight() <> Nil & node->GetRight()->GetRight() <> Nil) {
				node->GetRight()->SetRight(Skew(node->GetRight()->GetRight()));
			};	
			node := Split(node);								
			node->SetRight(Split(node->GetRight()));

			return node;
		}
		
		method : native : Predecessor(node :  Collection.TreeNode) ~ Compare {
			if(node->GetLeft() <> Nil) {
				left : TreeNode := node->GetLeft();
				while(left->GetLeft() <> Nil) {
					left := left->GetLeft();
				};

				return left->GetKey();
			};

			return node->GetKey();
		}

		method : native : Successor(node :  Collection.TreeNode) ~ Compare {
			if(node->GetRight() <> Nil) {
				right : TreeNode := node->GetRight();
				while(right->GetRight() <> Nil) {
					right := right->GetRight();
				};

				return right->GetKey();
			};

			return node->GetKey();
		}

		 method : native : DecreaseLevel(node :  Collection.TreeNode) ~ TreeNode {
			if(node->GetLeft() <> Nil & node->GetRight() <> Nil) {
				left : Int := node->GetLeft()->GetLevel();
				right : Int := node->GetRight()->GetLevel();
				value : Int := left->Min(right);
			
				if(value < node->GetLevel()) {
					node->SetLevel(value);
					if(value < node->GetRight()->GetLevel()) {
						node->GetRight()->SetLevel(value);
					};
				};
			};
			
			return node;
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~
	# Sets
	~~~~~~~~~~~~~~~~~~~~~~~#
	class FloatSet {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : Float) ~ Nil {
			@map->Insert(FloatHolder->New(key), Base->New());
		}
		
		method : public : Remove(key : Float) ~ Nil {
			@map->Remove(FloatHolder->New(key));
		}
    
		method : public : Has(key : Float) ~ Bool {
			result := @map->Find(FloatHolder->New(key))->As(FloatHolder);
			return result <> Nil;
		}
    
		method : public: native : GetKeys() ~ FloatVector {
			keys := FloatVector->New();
			holder_keys := @map->GetKeys();
			for(i := 0; i < keys->Size(); i += 1;) {
				holder_value : FloatHolder := holder_keys->Get(i)->As(FloatHolder);
				keys->AddBack(holder_value->Get());   
			};

			return keys;
		}
    
		method : public : GetValues() ~ Vector {
			return @map->GetValues();
		}

		method : public : Empty() ~ Nil {
			@map->Empty();
		}
		
		method : public : native : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}

		method : public : native : Size() ~ Int {
			return @map->Size();
		}

		method : public : GetMap() ~ Map {
			return @map;
		}
	}
	
	class StringSet {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : String) ~ Nil {
			@map->Insert(key, Base->New());
		}
		
		method : public : Remove(key : String) ~ Nil {
			@map->Remove(key);
		}
    
		method : public : Has(key : String) ~ Bool {
			return @map->Find(key) <> Nil;
		}
    
		method : public : GetKeys() ~ Vector {
			return @map->GetKeys();
		}

		method : public : native : Empty() ~ Nil {
			@map->Empty();
		}

		method : public : native : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}
		
		method : public : native : Size() ~ Int {
			return @map->Size();
		}
	}
	
	class Set {
		@map : Map;

		New() {
			@map := Map->New();
		}

		method : public : Insert(key : Compare) ~ Nil {
			@map->Insert(key, Base->New());
		}
		
		method : public : Remove(key : Compare) ~ Nil {
			@map->Remove(key);
		}
    
		method : public : Has(key : Compare) ~ Bool {
			return @map->Find(key) <> Nil;
		}
    
		method : public : GetKeys() ~ Vector {
			return @map->GetKeys();
		}

		method : public : native : Empty() ~ Nil {
			@map->Empty();
		}

		method : public : native : IsEmpty() ~ Bool {
			return @map->IsEmpty();
		}
		
		method : public : native : Size() ~ Int {
			return @map->Size();
		}
	}

	#~~~~~~~~~~~~~~~~~~~~~~~
	# Hashes
	~~~~~~~~~~~~~~~~~~~~~~~#
	class StringHash {
		@hash : Hash;

		New() {
			@hash := Hash->New();
		}

		method : public : Insert(key : String, value : Base) ~ Nil {
			@hash->Insert(key, value);
		}
		
		method : public : Remove(key : String) ~ Nil {
			@hash->Remove(key);
		}
    
		method : public : Find(key : String) ~ Base {
			return @hash->Find(key);
		}
		
		method : public : Has(key : String) ~ Bool {
			return @hash->Find(key) <> Nil;
		}
    
		method : public : GetKeys() ~ Vector {
			return @hash->GetKeys();
		}
    
		method : public : GetValues() ~ Vector {
			return @hash->GetValues();
		}

		method : public : native : Empty() ~ Nil {
			@hash->Empty();
		}

		method : public : native : Size() ~ Int {
			return @hash->Size();
		}
	}

	class Hash {
		@buckets : List[];
		@size : Int;
		
		New() {
			@buckets := List->New[337];
			@size := 0;
		}
		
		method : public : Insert(key : Compare, value : Base) ~ Nil {
			hash := (key->HashID() % @buckets->Size())->Abs();
			list := @buckets[hash];
			if(list = Nil) {
				list := List->New();
				@buckets[hash] := list;
			};
			list->AddBack(HashPair->New(key, value));
			@size := @size + 1;
		}

		method : public : native : Find(key : Compare) ~ Base {
			hash := (key->HashID() % @buckets->Size())->Abs();
			list := @buckets[hash];
			if(list <> Nil) {
				list->Rewind();
				while(list->More()) {
					pair : HashPair := list->Get()->As(HashPair);
					if(pair->Compare(key) = 0) {
						return pair->Get();
					};
					list->Next();
				};

				return Nil;
			};

			return Nil;
		}
		
		method : public : native : Has(key : Compare) ~ Bool {
			result := Find(key);
			return result <> Nil;
		}
		
		method : public : native : Remove(key : Compare) ~ Bool {
			hash := (key->HashID() % @buckets->Size())->Abs();
			list := @buckets[hash];
			if(list <> Nil) {
				list->Rewind();
				while(list->More()) {
					pair : HashPair := list->Get()->As(HashPair);
					if(pair->Compare(key) = 0) {
						list->Remove();
						@size := @size - 1;
						return true;
					};
					list->Next();
				};

				return false;
			};

			return false;
		}
		
		method : public : native : GetKeys() ~ Vector {
			keys := Vector->New();
			for(i := 0; i < @buckets->Size(); i += 1;) {
				if(@buckets[i] <> Nil) {
					list := @buckets[i];
					list->Rewind();
					while(list->More()) {
						pair : HashPair := list->Get()->As(HashPair);
						keys->AddBack(pair->GetKey());
						list->Next();
					};
				};
			};
			
			return keys;
		}
		
		method : public : native : GetValues() ~ Vector {
			values := Vector->New();
			for(i := 0; i < @buckets->Size(); i += 1;) {
				if(@buckets[i] <> Nil) {
					list := @buckets[i];
					list->Rewind();
					while(list->More()) {
						pair : HashPair := list->Get()->As(HashPair);
						values->AddBack(pair->Get());
						list->Next();
					};
				};
			};
			
			return values;
		}

		method : public : Empty() ~ Nil {
			@buckets := List->New[337];
			@size := 0;
		}
		
		method : public : Size() ~ Int {
			return @size;
		}
	}
	
	class HashPair implements Compare {
		@key : Compare;
		@value : Base;

		New(key : Compare, value : Base) {
			Parent();
			@key := key;
			@value := value;
		}

		method : public : native : Compare(rhs : Compare) ~ Int {		
			return @key->Compare(rhs);
		}

		method : public : HashID() ~ Int {
			return @key->HashID();
		}
		
		method : public : native : GetKey() ~ Compare {
			return @key;
		}

		method : public : native : Get() ~ Base {
			return @value;
		}
	}
}

bundle HTTP {
	#~~~~~~~~~~~~~~~~~~~~~~~
	# HTTP Client
	~~~~~~~~~~~~~~~~~~~~~~~#
	class HttpClient {
		@headers : Hash;
		@cookies_enabled : Bool;
		@cookies: Vector;
		
		New() {
			@cookies_enabled := false;
			@cookies := Vector->New();
		}
		
		method : GetHeaders() ~ Hash {
			return @headers;
		}
		
		method : public : CookiesEnabled(cookies_enabled : Bool) ~ Nil {
			@cookies_enabled := cookies_enabled;
		}	
		
		method : public : GetCookies() ~ Vector {
			return @cookies;
		}	
		
		method : public : SetCookie(cookie : String) ~ Nil {
			@cookies->AddBack(cookie);
		}	
		
		method : public : Post(url : String, data : String) ~ Vector {
			return Post(url, "text/plain", data);
		}
		
		method : public : Post(url : String, content_type : String, data : String) ~ Vector {
			@headers := Hash->New();
					
			content := Vector->New();
			if(url->StartsWith("http://")) {
				url := url->SubString("http://"->Size(), url->Size() - "http://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "80";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					post := "POST ";
					post->Append(location);
					post->Append(" HTTP/1.1\r\nHost: ");
					post->Append(address);
					post->Append("\r\nContent-Type: ");
					post->Append(content_type);
					post->Append("\r\nContent-Length: ");
					post->Append(data->Size()->ToString());
					post->Append("\r\n");
					if(@cookies_enabled & @cookies->Size() > 0) {
						post->Append("Cookie: ");
						each(i : @cookies) {
							post->Append(@cookies->Get(i)->As(String));
							if(i + 1 < @cookies->Size()) {
								post->Append("; ");
							};
						};
						post->Append("\r\n");
					};
					post->Append("\r\n");					
					post->Append(data);
					socket->WriteString(post);
					
# post->PrintLine();					
					
					status_code := 500;
					status_line := socket->ReadString();
					if(status_line->StartsWith("HTTP/1.1")) {
						status_line := status_line->SubString("HTTP/1.1"->Size() + 1, 
							status_line->Size() - "HTTP/1.1"->Size() - 1);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
# status_line->PrintLine();
					
					if(status_code <> 500) {
					  # get @headers
						do {
							line := socket->ReadString();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();			
								@headers->Insert(name, value);
# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
							};
						}
						while(line->Size() > 0);

						# look for chunked blocks
						encoding : String := @headers->Find("Transfer-Encoding")->As(String);
						if(encoding <> Nil & encoding->Equals("chunked")) {
							done := false;
							do {
								size_line := "0x";
								size_line->Append(socket->ReadString());
								chunk_size := size_line->ToInt();
								line := "";
								if(chunk_size > 0) {
									for(i := 0; i < chunk_size; i += 1;) {
										line->Append(socket->ReadByte());
									};
									socket->ReadString();
									content->AddBack(line);
								}
								else {
									done := true;
								};
							}
							while(done <> true);
						}
						else {
							length_header : String := @headers->Find("Content-Length")->As(String);
							if(length_header <> Nil) {
								length := length_header->ToInt();
								buffer := Byte->New[length];
								for(i := 0; i < length; i += 1;) {
									buffer[i] := socket->ReadByte();
								};
								line := String->New(buffer);
								content->AddBack(line);
							};						
						};
					};
					socket->Close();
				};
			};
			
			return content;
		}
		
		method : public : Get(url : String) ~ Vector {
			return Get(url, "text/plain");
		}
		
		method : public : Get(url : String, content_type : String) ~ Vector {
			@headers := Hash->New();
			content := Vector->New();
			
			if(url->StartsWith("http://")) {
				url := url->SubString("http://"->Size(), url->Size() - "http://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "80";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					get := "GET ";
					get->Append(location);
					get->Append(" HTTP/1.1\r\nHost: ");
					get->Append(address);
					get->Append("\r\n");
					if(@cookies_enabled & @cookies->Size() > 0) {
						get->Append("Cookie: ");
						each(i : @cookies) {
							get->Append(@cookies->Get(i)->As(String));
							if(i + 1 < @cookies->Size()) {
								get->Append("; ");
							};
						};
						get->Append("\r\n");
					};					
					get->Append("\r\n");		
					
# IO.Console->Print("Get: |")->Print(get)->PrintLine("|");
					
					socket->WriteString(get);
					
					status_code := 500;
					status_line := socket->ReadString();
					if(status_line->StartsWith("HTTP/1.1")) {
						status_line := status_line->SubString("HTTP/1.1"->Size() + 1, 
							status_line->Size() - "HTTP/1.1"->Size() - 1);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
					if(status_code <> 500) {
						# get @headers
						do {
							line := socket->ReadString();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								
# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									offset := value->Find(';');
									if(offset > -1) {
										value := value->SubString(offset);
									};
									@cookies->AddBack(value);
# IO.Console->Print("cookie=")->PrintLine(value);									
								}
								else {
									@headers->Insert(name, value);
								};
							};
						}
						while(line->Size() > 0);
						
# IO.Console->Print("cookies: size=")->PrintLine(@cookies->Size());						

						# look for chunked blocks
						encoding : String := @headers->Find("Transfer-Encoding")->As(String);
						if(encoding <> Nil & encoding->Equals("chunked")) {
							done := false;
							do {
								size_line := "0x";
								size_line->Append(socket->ReadString());
								chunk_size := size_line->ToInt();
								line := "";
								if(chunk_size > 0) {
									for(i := 0; i < chunk_size; i += 1;) {
										line->Append(socket->ReadByte());
									};
									socket->ReadString();
									content->AddBack(line);
								}
								else {								
									done := true;
								};
							}
							while(done <> true);
						}
						else {
							length_header : String := @headers->Find("Content-Length")->As(String);
							if(length_header <> Nil) {
								length := length_header->ToInt();
								buffer := Byte->New[length];
								for(i := 0; i < length; i += 1;) {
									buffer[i] := socket->ReadByte();
								};
								line := String->New(buffer);
								content->AddBack(line);
							};						
						};
					};
					socket->Close();
				}
				else {
					return Nil;
				};
			};	
			
			return content;
		}
	}

	#~~~~~~~~~~~~~~~~~~~~~~~
	# HTTPS Client - COMBINE WITH ABOVE!!
	~~~~~~~~~~~~~~~~~~~~~~~#
	class HttpsClient {
		@headers : Hash;
		@cookies_enabled : Bool;
		@cookies: Vector;
		
		New() {
			@cookies_enabled := false;
			@cookies := Vector->New();
		}
		
		method : GetHeaders() ~ Hash {
			return @headers;
		}
		
		method : public : CookiesEnabled(cookies_enabled : Bool) ~ Nil {
			@cookies_enabled := cookies_enabled;
		}	
		
		method : public : GetCookies() ~ Vector {
			return @cookies;
		}	
		
		method : public : SetCookie(cookie : String) ~ Nil {
			@cookies->AddBack(cookie);
		}	
		
		method : public : Post(url : String, data : String) ~ Vector {
			return Post(url, "text/plain", data);
		}
		
		method : public : Post(url : String, content_type : String, data : String) ~ Vector {
			@headers := Hash->New();
			
			content := Vector->New();
			if(url->StartsWith("https://")) {
				url := url->SubString("https://"->Size(), url->Size() - "https://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "443";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSecureSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					post := "POST ";
					post->Append(location);
					post->Append(" HTTP/1.1\r\nHost: ");
					post->Append(address);
					post->Append("\r\nContent-Type: ");
					post->Append(content_type);
					post->Append("\r\nContent-Length: ");
					post->Append(data->Size()->ToString());
					post->Append("\r\n");
					if(@cookies_enabled & @cookies->Size() > 0) {
						post->Append("Cookie: ");
						each(i : @cookies) {
							post->Append(@cookies->Get(i)->As(String));
							if(i + 1 < @cookies->Size()) {
								post->Append("; ");
							};
						};
						post->Append("\r\n");
					};
					post->Append("\r\n");					
					post->Append(data);
					socket->WriteString(post);
					
# post->PrintLine();					
					
					status_code := 500;
					status_line := socket->ReadString();
					if(status_line->StartsWith("HTTP/1.1")) {
						status_line := status_line->SubString("HTTP/1.1"->Size() + 1, 
							status_line->Size() - "HTTP/1.1"->Size() - 1);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
# status_line->PrintLine();
					
					if(status_code <> 500) {
					  # get @headers
						do {
							line := socket->ReadString();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();			
								@headers->Insert(name, value);
# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
							};
						}
						while(line->Size() > 0);

						# look for chunked blocks
						encoding : String := @headers->Find("Transfer-Encoding")->As(String);
						if(encoding <> Nil & encoding->Equals("chunked")) {
							done := false;
							do {
								size_line := "0x";
								size_line->Append(socket->ReadString());
								chunk_size := size_line->ToInt();
								line := "";
								if(chunk_size > 0) {
									for(i := 0; i < chunk_size; i += 1;) {
										line->Append(socket->ReadByte());
									};
									socket->ReadString();
									content->AddBack(line);
								}
								else {
									done := true;
								};
							}
							while(done <> true);
						}
						else {
							length_header : String := @headers->Find("Content-Length")->As(String);
							if(length_header <> Nil) {
								length := length_header->ToInt();
								buffer := Byte->New[length];
								for(i := 0; i < length; i += 1;) {
									buffer[i] := socket->ReadByte();
								};
								line := String->New(buffer);
								content->AddBack(line);
							};						
						};
					};
					socket->Close();
				};
			};
			
			return content;
		}
		
		method : public : Get(url : String) ~ Vector {
			return Get(url, "text/plain");
		}
		
		method : public : Get(url : String, content_type : String) ~ Vector {
			@headers := Hash->New();
			content := Vector->New();
			
			if(url->StartsWith("https://")) {
				url := url->SubString("https://"->Size(), url->Size() - "https://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "443";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSecureSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					get := "GET ";
					get->Append(location);
					get->Append(" HTTP/1.1\r\nHost: ");
					get->Append(address);
					get->Append("\r\n");
					if(@cookies_enabled & @cookies->Size() > 0) {
						get->Append("Cookie: ");
						each(i : @cookies) {
							get->Append(@cookies->Get(i)->As(String));
							if(i + 1 < @cookies->Size()) {
								get->Append("; ");
							};
						};
						get->Append("\r\n");
					};					
					get->Append("\r\n");		
					
# IO.Console->Print("Get: |")->Print(get)->PrintLine("|");
					
					socket->WriteString(get);
					
					status_code := 500;
					status_line := socket->ReadString();
					if(status_line->StartsWith("HTTP/1.1")) {
						status_line := status_line->SubString("HTTP/1.1"->Size() + 1, 
							status_line->Size() - "HTTP/1.1"->Size() - 1);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
# status_code->PrintLine();					
					if(status_code <> 500) {
						# get @headers
						do {
							line := socket->ReadString();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								
# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									offset := value->Find(';');
									if(offset > -1) {
										value := value->SubString(offset);
									};
									@cookies->AddBack(value);
# IO.Console->Print("cookie=")->PrintLine(value);									
								}
								else {
									@headers->Insert(name, value);
								};
							};
						}
						while(line->Size() > 0);
						
# IO.Console->Print("cookies: size=")->PrintLine(@cookies->Size());						

						# look for chunked blocks
						encoding : String := @headers->Find("Transfer-Encoding")->As(String);
						if(encoding <> Nil & encoding->Equals("chunked")) {
							done := false;
							do {
								size_line := "0x";
								size_line->Append(socket->ReadString());
								chunk_size := size_line->ToInt();
								line := "";
								if(chunk_size > 0) {
									for(i := 0; i < chunk_size; i += 1;) {
										line->Append(socket->ReadByte());
									};
									socket->ReadString();
									content->AddBack(line);
								}
								else {								
									done := true;
								};
							}
							while(done <> true);
						}
						else {
							length_header : String := @headers->Find("Content-Length")->As(String);
							if(length_header <> Nil) {
								length := length_header->ToInt();
								buffer := Byte->New[length];
								for(i := 0; i < length; i += 1;) {
									buffer[i] := socket->ReadByte();
								};
								line := String->New(buffer);
								content->AddBack(line);
							};						
						};
					};
					socket->Close();
				}
				else {
					return Nil;
				};
			};	
			
			return content;
		}
	}
		
	#~~~~~~~~~~~~~~~~~~~~~~~
	# HTTP UrlUtility
	~~~~~~~~~~~~~~~~~~~~~~~#
	class UrlUtility {
		function : native : Encode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				select(c) {
					label ' ': {
						buffer->Append('+');
					}

					label ';': {
						buffer->Append("%3B");
					}

					label '=': {
						buffer->Append("%3D");
					}

					label '$': {
						buffer->Append("%26");
					}

					label ',': {
						buffer->Append("%2C");
					}

					label '<': {
						buffer->Append("%3C");
					}

					label '>': {
						buffer->Append("%3E");
					}

					label '^': {
						buffer->Append("%5E");
					}

					label '`': {
						buffer->Append("%60");
					}

					label '\\': {
						buffer->Append("%5C");
					}

					label '[': {
						buffer->Append("%5B");
					}

					label ']': {
						buffer->Append("%5D");
					}

					label '{': {
						buffer->Append("%7B");
					}

					label '}': {
						buffer->Append("%7D");
					}

					label '|': {
						buffer->Append("%7C");
					}

					label '"': {
						buffer->Append("%22");
					}

					label ':': {
						buffer->Append("%3A");
					}

					label '/': {
						buffer->Append("%2F");
					}

					label '#': {
						buffer->Append("%23");
					}

					label '?': {
						buffer->Append("%3F");
					}

					label '&': {
						buffer->Append("%24");
					}

					label '@': {
						buffer->Append("%40");
					}

					label '%': {
						buffer->Append("%25");
					}

					label '+': {
						buffer->Append("%2B");
					}

					label '~': {
						buffer->Append("%7E");
					}

					other: {
						buffer->Append(c);
					}
				};
			};
			
			return buffer;
		}

		function : native : Decode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				if(c = '+') {
					buffer->Append(' ');
				}
				else if(c = '%' & i + 2 < str->Size()) {
					value := "0x";
					value->Append(str->Get(i + 1));
					value->Append(str->Get(i + 2));
					buffer->Append(value->ToInt()->As(Char));
					i += 2;
				}
				else {
					buffer->Append(c);
				};
			};

			return buffer;
		}
	}
}
