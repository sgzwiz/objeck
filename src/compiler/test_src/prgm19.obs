bundle Test {
	class String {
		@string : Char[];
		@max : Int;
		@pos : Int;

		New(array : Char[]) {
			@max := 256;
			@string := Char->New[@max];
			@pos := 0;

			Append(array);
		}

		New() {
			@max := 256;
			@string := Char->New[@max];
			@pos := 0;
		}
		
		method : public : native : Append(array : Char[]) ~ Nil {
#		method : public : Append(array : Char[]) ~ Nil {
			v : Int := @pos + array->Size() * 4.9;
			v->PrintLine();

#~
			if(2.3 - @pos + array->Size() * 4.9 >= @max) {
			};
			v : Int := @pos + 33.3 + array->Size();
			if(v >= @max) {
			};
~#
#~
				# expand array
				@max := (@max + array->Size()) * 2;
				tmp : Char[] := Char->New[@max];
				# copy elements
				for(i : Int := 0; i < @string->Size(); i := i + 1;) {
					tmp[i] := @string[i];	
				};
				@string := tmp;
			};

			for(i : Int := 0; i < array->Size(); i := i + 1;) {
				@string[@pos] := array[i];
				@pos := @pos + 1;
			};	
~#
		}
		
		method : public : native : ToInt() ~ Int {
#		method : public : ToInt() ~ Int {
			if(@string->Size() > 0) {
				is_neg : Bool := false;
				if(@string[0] = '-') {
					is_neg := true;
				};

				end : Int;
				if(is_neg) {
					end := 0;
				}
				else {
					end := -1;
				};

				val : Int := 0;
				mag : Int := 1;
				for(i : Int := @pos - 1; i > end; i := i - 1;) {
					pos_val : Int := @string[i] - 48;
					if(pos_val < 0 | pos_val > 9) {
						return 0;
					};

					if(mag = 1) {
						val := pos_val;
					}
					else {
						val := val + pos_val * mag;	
					};
					# update
					mag := mag * 10;
				};

				if(is_neg) {
					return val * -1;
				}
				else {
					return val;
				};
			};

			return 0;
		}

		method : public : native : PrintLine() ~ Nil {
			@string->PrintLine();
		}
	}
}

bundle Default {	
	class Blah {
		a : Int;

		New() {
			a := 10;
		}
		
		method : public : GetA() ~ Int {
			return a;
		}
	}

	class Test {
		ff : System.String;
		
		New() {
			ff := "yxfo";
		}
		
		method : Do() ~ Nil {
				ff->Size()->PrintLine();
		}
		
		function : Main(args : System.String[]) ~ Nil {
			Run();
		}
		
		function : Run() ~ Nil {
			x : System.String := "Ha, Ha!";
			x->PrintLine();
			"Done."->PrintLine();

#~
			"99"->PrintLine();
			cc : System.String := IO.Console->ReadString();
			cc->PrintLine();

			cc[0]->PrintLine();
			for(i : Int := 0; i < cc->Size(); i := i + 1;) {
				cc[i]->PrintLine();
			};
			
			sx : System.String := System.String->New("Ha, Ha!");
			sx->PrintLine();

			ss : System.String := System.String->New(cc);
			ss->PrintLine();
			"Done."->PrintLine();						
			xx : Char[] := "Hello";
			si : System.String := System.String->New(xx);
			si->PrintLine();
~#
		}
	}
}
