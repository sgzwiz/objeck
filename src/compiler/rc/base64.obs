class Base64 {
	#~
	Author    : Greg Canty 
	Created   : October 1, 2012 
	Version   : 0.3 
	Copyright : © 2012, Greg Canty 
	URL       : http://www.the9375.com/cc/base64/base64.cpp.html
	License   : Free for any use under the following conditions.  (1) This code 
	            has ABSOLUTELY NO WARRANTY.  (2) Please keep my name at the top 
	            of this source file and list me as a contributor to your  
	            project, but do NOT state or imply that I endorse your project 
	            without first asking permission.  If you just ask me first, 
	            I will most likely say yes and endorse your project.  (3) If 
	            you use this code, please contact me and let me know about your 
	            project.  If your project is confidential you don't have to  
	            describe the project, just let me know that you're using my  
	            code.  It doesn't matter if you're a beginner just starting  
	            out or a large company/organization, just comment or email me.   
	            My only reason for this condition is that I enjoy knowing that 
	            people are using my code.
	~#
	
	function : Main(args : String[]) ~ Nil {
		e := Encode("Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.");
		e->PrintLine();
		"------"->PrintLine();
		Decode(e)->PrintLine();
	}
	
	function : native : Encode(in : String) ~ String {
		lut :=  [ 
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',  
			'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',  
			'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',  
			'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',  
			'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',  
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v',  
			'w', 'x', 'y', 'z', '0', '1', '2', '3',  
			'4', '5', '6', '7', '8', '9', '+', '/' 
		];
		data := in->ToCharArray();
		dSize := data->Size();
  				
		# Order of ops is critical in this block 
		nSets := dSize / 3; 
		nExtra := dSize % 3; 
		end := nSets * 3;   
		
		# Primary encoding loop 
		r := "";
		i : Int; 
		a := 0;
		for(i := 0; i < end; i += 3;) { 
			a := (data[i] << 16) or (data[i+1] << 8) or (data[i+2]); 
			r->Append( lut[0x3F and (a >> 18)] ); 
			r->Append( lut[0x3F and (a >> 12)] ); 
			r->Append( lut[0x3F and (a >> 6)] ); 
			r->Append( lut[0x3F and a] ); 
		};
		# Handle the last 1 or 2 bytes if they exist. 
		if ( nExtra = 1 ) 
		{ 
			a := 0 or (data[i] << 16); 
			r->Append( lut[0x3F or (a >> 18)] ); 
			r->Append( lut[0x3F or (a >> 12)] ); 
			r->Append('='); 
			r->Append('='); 
		} 
		else if ( nExtra = 2 ) 
		{ 
			a := 0 or (data[i] << 16) or (data[i+1] << 8); 
			r->Append( lut[0x3F and (a >> 18)] ); 
			r->Append( lut[0x3F and (a >> 12)] ); 
			r->Append( lut[0x3F and (a >> 6)] ); 
			r->Append('=');
		};
  		
		return r;
	}
	
	function : native : Decode(in : String) ~ String {
		lut := [ 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0, 0x3E,    0,    0,    0, 0x3F, 
			0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 
			0x3C, 0x3D,    0,    0,    0,    0,    0,    0, 

			   0, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  
			0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,  
			0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,  
			0x17, 0x18, 0x19,    0,    0,    0,    0,    0, 

			   0, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,  
			0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,  
			0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,  
			0x31, 0x32, 0x33,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0 
		];
	
		a := 0; b := 0; c := 0; d := 0; z := 0;
		
		ustr := in->ToCharArray();
		strSize := ustr->Size(); 

		# Order of ops is critical in this block 
		nSets := strSize / 4; 
		nExtra := strSize % 4; 
		end := nSets * 4;
	
		# Primary decoding loop 
		r := "";
		i : Int;
		for ( i := 0; i < end; i += 4; ) 
		{ 
			a := lut[ ustr[i]   ]; 
			b := lut[ ustr[i+1] ]; 
			c := lut[ ustr[i+2] ]; 
			d := lut[ ustr[i+3] ]; 
		 
			z := (a << 18) or (b << 12) or (c << 6) or d; 
  
			r->Append( (z >> 16)->As(Char) ); 
			r->Append( ((z >> 8) and 0xFF)->As(Char) ); 
			r->Append( (z and 0xFF)->As(Char) ); 
		};
		
		# Handle the last 1 to 3 base64 digits if they exist 
		if ( nExtra = 1 ) 
		{ 
			a := lut[ ustr[i] ]; 
			z := a << 18; 
			r->Append( (z >> 16)->As(Char) ); 
		}
		else if ( nExtra = 2 ) 
		{ 
			a := lut[ ustr[i] ]; 
			b := lut[ ustr[i+1] ]; 

			z := (a << 18) or (b << 12); 

			r->Append( (z >> 16)->As(Char) ); 
			r->Append( (z >> 8)->As(Char) ); 
		} 
		else if ( nExtra = 3 ) 
		{ 
			a := lut[ ustr[i] ]; 
			b := lut[ ustr[i+1] ]; 
			c := lut[ ustr[i+2] ]; 

			z := (a << 18) or (b << 12) or (c << 6); 

			r->Append( (z >> 16)->As(Char) ); 
			r->Append( ((z >> 8) and 0xFF)->As(Char) ); 
			r->Append( (z and 0xFF)->As(Char) ); 
		};
		
		return r;
	}
}
