use IO;

bundle Default {
	enum TokenType := -32 {
		ZERO_MORE,
		ONE_MORE,
		SEQUENCE,
		ALTERNATION,
		OPRN,
		CPRN,
		STOP,
		NONE
	}
	
	class Token {
		@type : Int;
		@values : String;
		
		New(type : Int) {
			@type := type;
			@values := Nil;
		}
		
		New(type : Int, values : String) {
			@type := type;
			@values := values;
		}
		
		method : public : GetType() ~ Int {
			return @type;
		}
		
		method : public : GetValues() ~ String {
			return @values;
		}
	}
	
	enum InstrType := -64 {
		ZERO_MORE,
		ONE_MORE,
		ALTERNATION,
		MATCH,
		JUMP,
		STOP,
		NOP
	}
	
	class Instr {
		@type : InstrType;
		@value : Int;
		@values : String;
		
		New(type : InstrType) {
			@type := type;
			@value := -1;
		}
		
		New(type : InstrType, value : Int) {
			@type := type;
			@value := value;
		}
		
		New(type : InstrType, values : String) {
			@type := type;
			@value := -1;
			@values := values;
		}
		
		method : public : GetType() ~ InstrType {
			return @type;
		}
		
		method : public : SetType(type : InstrType) ~ Nil {
			@type := type;
		}
		
		method : public : GetValue() ~ Int {
			return @value;
		}
		
		method : public : SetValue(value : Int) ~ Nil {
			@value := value;
		}
		
		method : public : GetValues() ~ String {
			return @values;
		}
	}
	
	class Postfix {
		@input : String;
		@index : Int;
		@char : Char;
		@input_stack : Token[];
		@input_index : Int;
		@calc_stack : Int[];
		@calc_index : Int;
		@output : Instr[];
		@output_index : Int;
		@error : String;
		@ctrl : Instr;
		
		New(input : String) {
			@input := input;
			@index := 0;
			@input_stack := Token->New[256];
			@input_index := 0;
			@calc_stack := Int->New[256];
			@calc_index := 0;
			@output := Instr->New[256];
			@output_index := 0;
		}

		method : public : Compile() ~ String {
			Parse();
DumpInput();			
			if(@error = Nil) {
				@input_index := 0;
				@ctrl := Instr->New(InstrType->JUMP);
				@output[@output_index] := @ctrl;
				@output_index += 1;
				Emit(TokenType->NONE);
				if(@calc_index <> 0) {
					@error := "invalid expression";
				};

DumpOutput(@output);
if(@error <> Nil) {				
	@error->PrintLine();
};
			};
			
			return "";
		}

		method : EmitMatch() ~ Bool {
			if(@calc_index > 0) {
				top := @calc_stack[@calc_index - 1];
				if(top >= 40 & top <= 122) {
					match := @calc_stack[@calc_index - 1];
					@calc_index -= 2;
								
					@output[@output_index] := Instr->New(InstrType->MATCH, match);
					@output_index += 1;
				
					return true;
				};
			};
			
			return false;
		}
		
		method : Emit(end : TokenType) ~ Nil {
			start := -1;
			
			c := @input_stack[@input_index];
			while(c <> Nil & c->GetType() <> end->As(Int)) {
				select(c->GetType()) {
					label TokenType->ZERO_MORE: {
						top := @calc_stack[@calc_index - 1];
						
						# char match
						if(top >= 40 & top <= 122) {
							@calc_index -= 1;
							match := @calc_stack[@calc_index];
								
							@output[@output_index] := Instr->New(InstrType->MATCH, match);
							@output_index += 1;
						}
						# oper match
						else if(top <= TokenType->NONE->As(Int) & top >= TokenType->ZERO_MORE->As(Int)) {
							@calc_index -= 1;
				 		}
						else {
							@error := "invalid expression";
						};	
						
						@calc_index -= 1;
			 			index := @calc_stack[@calc_index];

						# instr
						@output[@output_index] := Instr->New(InstrType->ZERO_MORE);
						
						@calc_stack[@calc_index] := @output_index;
						@calc_index += 1;
						
						@calc_stack[@calc_index] := c->GetType();
						@calc_index += 1;					
						
						@output_index += 1;
				
						# loop
						@ctrl->SetValue(@output_index - 1);
						@output[@output_index] := Instr->New(InstrType->JUMP, index);
						@output_index += 1;
						
						@ctrl := Instr->New(InstrType->JUMP);
						@output[@output_index] := @ctrl;
						@output_index += 1;
					}

					label TokenType->ONE_MORE: {
					}

					label TokenType->SEQUENCE: {
						EmitMatch();
						# next			
						@output[@output_index] := Instr->New(InstrType->JUMP, @output_index + 1);
						@output_index += 1;
						
					}

					label TokenType->ALTERNATION: {
						left := -1;
						right := -1;	
						union := Instr->New(InstrType->JUMP);
						
						#
						# match right
						#
						
						# char right
						if(@calc_index < 1) {
							@error := "invalid expression";
							return;
						};
						top := @calc_stack[@calc_index - 1];
						if(top >= 40 & top <= 122) {
							right := @output_index;
							@calc_index -= 1;
							match := @calc_stack[@calc_index];

							@calc_index -= 1;
				 			index := @calc_stack[@calc_index];
														
							@output[@output_index] := Instr->New(InstrType->MATCH, match);
							@output_index += 1;
							
							@output[@output_index] := union;
							@output_index += 1;
						}
						# oper match
						else if(top <= TokenType->NONE->As(Int) & top >= TokenType->ZERO_MORE->As(Int)) {
							@calc_index -= 2;
			 				right := @calc_stack[@calc_index];
			 				
			 				@output[@output_index] := union;
							@output_index += 1;
						}
						else {
							@error := "invalid expression";
							return;
						};
						
						#
						# match left
						#
						
						# char match
						if(@calc_index < 1) {
							@error := "invalid expression";
							return;
						};							
						top := @calc_stack[@calc_index - 1];
						if(top >= 40 & top <= 122) {
							left := @output_index;
							
							@calc_index -= 1;
							match := @calc_stack[@calc_index];

							@calc_index -= 1;
				 			index := @calc_stack[@calc_index];
				 			
							@output[@output_index] := Instr->New(InstrType->MATCH, match);
							@output_index += 1;

							@output[@output_index] := union;
							@output_index += 1;
						}
						# oper match
						else if(top <= TokenType->NONE->As(Int) & top >= TokenType->ZERO_MORE->As(Int)) {
							@calc_index -= 2;
			 				left := @calc_stack[@calc_index];
			 				
			 				@output[@output_index] := union;
							@output_index += 1;
						}
						else {
							@error := "invalid expression";
							return;
						};
						
						# instr
						@ctrl->SetValue(@output_index);
						@output[@output_index] := Instr->New(InstrType->ALTERNATION);
						
						@calc_stack[@calc_index] := @output_index;
						@calc_index += 1;
						
						@calc_stack[@calc_index] := c->GetType();
						@calc_index += 1;
						
						@output_index += 1;

						@output[@output_index] := Instr->New(InstrType->JUMP, right);
						@output_index += 1;

						@output[@output_index] := Instr->New(InstrType->JUMP, left);
						@output_index += 1;
						
						union->SetValue(@output_index);
						
						@ctrl := Instr->New(InstrType->JUMP);
						@output[@output_index] := @ctrl;
						@output_index += 1;
					}				

					label TokenType->OPRN: {
						# emit parn
						offset := @output_index;
						@input_index += 1;
						Emit(TokenType->CPRN);
																	
						c := @input_stack[@input_index];
						EmitMatch();
							
						top := 0;
						if(@calc_index > 0) {
							top := @calc_stack[@calc_index - 1];
						};			
						if(top > TokenType->NONE->As(Int)) {
							# push offset
							@calc_stack[@calc_index] := offset;
							@calc_index += 1;
	
							@calc_stack[@calc_index] := c->GetType();
							@calc_index += 1;
						};
					}
					
					label TokenType->STOP: {
						# alt						
						top := @calc_stack[@calc_index - 1];
						if(top <= TokenType->NONE->As(Int) & top >= TokenType->ZERO_MORE->As(Int)) {
							@calc_index -= 2;	
						};
						
						EmitMatch();
						
						if(@ctrl->GetValue() < 0) {
							@ctrl->SetType(InstrType->NOP);
						};
						
						@output[@output_index] := Instr->New(InstrType->STOP);
						@output_index += 1;
					}
					
					other: {
						# alt
						if(@calc_index > 0) {
							top := @calc_stack[@calc_index - 1];
							if(top <= TokenType->NONE->As(Int) & top >= TokenType->ZERO_MORE->As(Int)) {
								@calc_index -= 2;	
							};
						};
						
						@calc_stack[@calc_index] := @output_index;
						@calc_index += 1;

						@calc_stack[@calc_index] := c->GetType();
						@calc_index += 1;
					}
				};
				# update
				@input_index += 1;
				c := @input_stack[@input_index];	 
			};
			
Console->Print("calc: id=")->PrintLine(@calc_index);
		}

		method : Push(value : Int) ~ Nil {
			@input_stack[@input_index] := Token->New(value);
			@input_index += 1;
		}

		method : Replace(test : Int, value : Int) ~ Nil {
			if(@input_stack[@input_index - 1]->GetType() = test) {			
				@input_stack[@input_index - 1] := Token->New(value);
			}
			else {
				@input_stack[@input_index] := Token->New(value);
				@input_index += 1;
			};
		}

		method : Next() ~ Nil {
			if(@index < @input->Size()) {
				@char := @input->Get(@index);
				@index += 1;
			}
			else {

				@char := '\0';
			};
		}
		
		method : IsNext(c : Char) ~ Bool {
			if(@index - 1 < @input->Size()) {
				return @input->Get(@index - 1) = c;
			};
			
			return true;
		}
		
		# TODO: validate input
		method : Parse() ~ Nil {
			Next();
			Alternation();
			Replace(TokenType->SEQUENCE->As(Int), TokenType->STOP->As(Int));
		}	

		method : Alternation() ~ Nil {
			Sequence();

			if(@char = '|') {
				while(@char = '|') {
					Next();
					Sequence();
				};
				Replace(TokenType->SEQUENCE->As(Int), TokenType->ALTERNATION->As(Int));
			};			
		}

		method : Sequence() ~ Nil {
			while(@char >= 40 & @char <= 122 & @char <> ')') {
				if(Repetition()) {
					if(IsNext('|') = false & IsNext(')') = false) {
						Push(TokenType->SEQUENCE->As(Int));
					};
				};
			};
		}
		
		method : Repetition() ~ Bool {
			was_pushed := false;
	
			if(@char = '(') {
				Push(TokenType->OPRN->As(Int));
				Next();
				Alternation();
				if(@char <> ')') {
					@error := "expected ')'";
					return false;
				};
				Push(TokenType->CPRN->As(Int));
				Next();
			}
			else if(@char <> ')') {
				Push(@char->As(Int));
				Next();
				was_pushed := true;
			};
			
			if(@char = '*') {
				Push(TokenType->ZERO_MORE->As(Int));
				was_pushed := true;
				Next();
			}
			else if(@char = '+') {
				Push(TokenType->ONE_MORE->As(Int));
				was_pushed := true;
				Next();
			};			
			
			return was_pushed;
		}
		
		function : DumpOutput(instrs : Instr[]) ~ Nil {
			i := 0;
			c := instrs[0];	 

			while(c <> Nil) {
				select(c->GetType()) {
					label InstrType->ZERO_MORE: {
						Console->Print(i)->PrintLine(": ZERO_MORE");
					}
					
					label InstrType->ONE_MORE: {
						Console->Print(i)->PrintLine(": ONE_MORE");
					}
					
					label InstrType->ALTERNATION: {
						Console->Print(i)->PrintLine(": ALTERNATION");
					}
					
					label InstrType->MATCH: {
						Console->Print(i)->Print(": MATCH char='")
							->Print(c->GetValue()->As(Char))->PrintLine("'");
					}
					
					label InstrType->JUMP: {
						Console->Print(i)->Print(": JUMP pos=")->PrintLine(c->GetValue());
					}
					
					label InstrType->STOP: {
						Console->Print(i)->PrintLine(": STOP");
					}
					
					label InstrType->NOP: {
						Console->Print(i)->PrintLine(": NOP");
					}
				};
				i += 1;
				c := instrs[i];	 
			};
			"-----"->PrintLine();
		}		
		
		method : DumpInput() ~ Nil {
			i := 0;
			c := @input_stack[0];	 

			while(c <> Nil) {
				select(c->GetType()) {
					label TokenType->ZERO_MORE: {
						'*'->PrintLine();
					}

					label TokenType->ONE_MORE: {
						'+'->PrintLine();
					}

					label TokenType->SEQUENCE: {
						'.'->PrintLine();
					}

					label TokenType->ALTERNATION: {
						'|'->PrintLine();
					}
					
					label TokenType->OPRN: {
						'('->PrintLine();
					}
					
					label TokenType->CPRN: {
						')'->PrintLine();
					}
					
					label TokenType->STOP: {
						"STOP"->PrintLine();
					}
				
					other: {
						v := c->GetType()->As(Char);
						v->PrintLine();
					}
				};
				i += 1;
				c := @input_stack[i];	 
			};
			"-----"->PrintLine();
		}

		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				p := Postfix->New(args[0]);
				p->Compile();
			};
		}
	}
}
