use Collection;
use IO;

bundle Default {
	class Foo {
		function : native : ToString(d : Time.Date) ~ String {
			# format: DAY, DD-MMM-YYYY HH:MM:SS GMT
			date_str := String->New();

			dd := d->GetDayName();
			if(dd->Equals("Sunday")) {
				date_str->Append("Sun");
			}	
			else if(dd->Equals("Monday")) {
				date_str->Append("Mon");
			}
			else if(dd->Equals("Tuesday")) {
				date_str->Append("Tue");
			}
			else if(dd->Equals("Wednesday")) {
				date_str->Append("Wed");
			}
			else if(dd->Equals("Thursday")) {
				date_str->Append("Thu");
			}
			else if(dd->Equals("Friday")) {
				date_str->Append("Fri");
			}
			else {
				date_str->Append("Sat");
			};
			date_str->Append(", ");

			day := d->GetDay();
			if(day < 10) {
				date_str->Append('0');
				date_str->Append(day);
			}
			else {
				date_str->Append(day);
			};
			date_str->Append('-');

			select(d->GetMonth()) {
				label 1: {
					date_str->Append("Jan");
				}

				label 2: {
					date_str->Append("Feb");
				}

				label 3: {
					date_str->Append("Mar");
				}

				label 4: {
					date_str->Append("Apr");
				}

				label 5: {
					date_str->Append("May");
				}

				label 6: {
					date_str->Append("Jun");
				}

				label 7: {
					date_str->Append("Jul");
				}

				label 8: {
					date_str->Append("Aug");
				}

				label 9: {
					date_str->Append("Sep");
				}

				label 10: {
					date_str->Append("Oct");
				}

				label 11: {
					date_str->Append("Nov");
				}

				label 12: {
					date_str->Append("Dec");
				}
			};
			date_str->Append('-');

			date_str->Append(d->GetYear());
			date_str->Append(' ');

			hours := d->GetHours();
			if(hours < 10) {
				date_str->Append('0');
				date_str->Append(hours);
			}
			else {
				date_str->Append(hours);
			};
			date_str->Append(':');

			mins := d->GetMinutes();
			if(mins < 10) {
				date_str->Append('0');
				date_str->Append(mins);
			}
			else {
				date_str->Append(mins);
			};
			date_str->Append(':');
			
			secs := d->GetSeconds();
			if(secs < 10) {
				date_str->Append('0');
				date_str->Append(secs);
			}
			else {
				date_str->Append(secs);
			};
			date_str->Append(" GMT");

			return date_str;
		}

		function : Main(args : String[]) ~ Nil {
#			ToString(Time.Date->New(true))->PrintLine();
			future := Time.Date->New();
			future->AddDays(-1);
			ToString(future)->PrintLine();

			in := "hello+world+%2F+again%22%3B";
			in->PrintLine();
			out := Decode(in);
			out->PrintLine();

			out2 := Encode(out);
			out2->PrintLine();
			in->Equals(out2)->PrintLine();

			"0x20"->ToInt()->PrintLine();
	 b := "fname=&lname=&dog=use+API%3B%0D%0Ause+Struct%3B%0D%0A%0D%0Abundle+FastCgi+%7B%0D%0A%09class+Proxy+%7B%0D%0A%09%09%40lib_proxy+%3A+static+%3A+DllProxy%3B%0D%0A%09%09%0D%0A%09%09function+%3A+GetDllProxy%28%29+%7E+DllProxy+%7B%0D%0A%09%09%09if%28%40lib_proxy+%3D+Nil%29+%7B%0D%0A%09%09%09%09%40lib_proxy+%3A%3D+DllProxy-%3ENew%28%22%2Ftmp%2Ffcgi%22%29%3B%0D%0A%09%09%09%7D%3B%0D%0A%0D%0A%09%09%09return+%40lib_proxy%3B%0D%0A%09%09%7D%0D%0A%09%7D%0D%0A%09%0D%0A%09class+UrlUtility+%7B%0D%0A%09%09function+%3A+native+%3A+Encode%28str+%3A+String%29+%7E+String+%7B%0D%0A%09%09%09buffer+%3A%3D+String-%3ENew%28%29%3B%0D%0A%09%09%09each%28i+%3A+str%29+%7B%0D%0A%09%09%09%09c+%3A%3D+str-%3EGet%28i%29%3B%0D%0A%09%09%09%09select%28c%29+%7B%0D%0A%09%09%09%09%09label+%27+%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%27%2B%27%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3B%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253B%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3D%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253D%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%24%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2526%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%2C%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%252C%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3C%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253C%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3E%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253E%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%5E%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%255E%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%60%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2560%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%5C%5C%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%255C%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%5B%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%255B%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%5D%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%255D%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%7B%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%257B%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%7D%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%257D%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%7C%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%257C%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%22%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2522%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3A%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253B%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%2F%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%252F%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%23%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2523%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%3F%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%253F%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%26%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2524%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%40%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2540%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%25%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%2525%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%2B%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%252B%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09label+%27%7E%27%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28%22%257E%22%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%0D%0A%09%09%09%09%09other%3A+%7B%0D%0A%09%09%09%09%09%09buffer-%3EAppend%28c%29%3B%0D%0A%09%09%09%09%09%7D%0D%0A%09%09%09%09%7D%3B%0D%0A%09%09%09%7D%3B%0D%0A%09%09%09%0D%0A%09%09%09return+buffer%3B%0D%0A%09%09%7D%0D%0A%0D%0A%09%09function+%3A+native+%3A+Decode%28str+%3A+String%29+%7E+String+%7B%0D%0A%09%09%09buffer+%3A%3D+String-%3ENew%28%29%3B%0D%0A%09%09%09each%28i+%3A+str%29+%7B%0D%0A%09%09%09%09c+%3A%3D+str-%3EGet%28i%29%3B%0D%0A%09%09%09%09";
			v := GetQuery(b);
		}

		function : public : GetQuery(@query : String) ~ String {
			if(@query <> Nil & @query->Size() > 0) {
				@parameters := StringMap->New();
				name_values := @query->Split("&");
				each(i : name_values) {
					name_value := name_values[i]->Split("=");
					if(name_value->Size() = 2) {
						@parameters->Insert(name_value[0], name_value[1]);
					};
				};
				return @parameters->Find("dog");
			};
			
			return Nil;
		}

		function : Encode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				select(c) {
					label ' ': {
						buffer->Append('+');
					}

					label ';': {
						buffer->Append("%3B");
					}

					label '=': {
						buffer->Append("%3D");
					}

					label '$': {
						buffer->Append("%26");
					}

					label ',': {
						buffer->Append("%2C");
					}

					label '<': {
						buffer->Append("%3C");
					}

					label '>': {
						buffer->Append("%3E");
					}

					label '^': {
						buffer->Append("%5E");
					}

					label '`': {
						buffer->Append("%60");
					}

					label '\\': {
						buffer->Append("%5C");
					}

					label '[': {
						buffer->Append("%5B");
					}

					label ']': {
						buffer->Append("%5D");
					}

					label '{': {
						buffer->Append("%7B");
					}

					label '}': {
						buffer->Append("%7D");
					}

					label '|': {
						buffer->Append("%7C");
					}

					label '"': {
						buffer->Append("%22");
					}

					label ':': {
						buffer->Append("%3B");
					}

					label '/': {
						buffer->Append("%2F");
					}

					label '#': {
						buffer->Append("%23");
					}

					label '?': {
						buffer->Append("%3F");
					}

					label '&': {
						buffer->Append("%24");
					}

					label '@': {
						buffer->Append("%40");
					}

					label '%': {
						buffer->Append("%25");
					}

					label '+': {
						buffer->Append("%2B");
					}

					label '~': {
						buffer->Append("%7E");
					}

					other: {
						buffer->Append(c);
					}
				};
			};
			
			return buffer;
		}

		function : Decode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				if(c = '+') {
					buffer->Append(' ');
				}
				else if(c = '%') {
					value := "0x";
					value->Append(str->Get(i + 1));
					value->Append(str->Get(i + 2));
					buffer->Append(value->ToInt()->As(Char));
					i += 2;
				}
				else {
					buffer->Append(c);
				};
			};

			return buffer;
		}
	}
}
