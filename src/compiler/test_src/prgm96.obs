use IO;

bundle Default {
	class Foo {
		f : Float;
		i : Int;

		New(t : Int) {
			f := 1001.45 * t;
			i := t;
		}

		method : public : GetF() ~ Float {
			return f;
		}

		method : public : GetI() ~ Int {
			return i;
		}
	}
		
	class Test {
		i : Int;
		f : Float;
		ii : Int[];
		ff : Float[];
		x : Foo;
		y : Foo;

		New() {
			i := 13;
			f := 33.78;

			ii := Int->New[3];
			ii[0] := 1;
			ii[1] := 101;
			ii[2] := 880;

#~
			ff := Float->New[3];
			ff[0] := 3.5;
			ff[1] := 13.15;
			ff[2] := 30.52;
~#

			x := Foo->New(678);
#			y := x;
#			y := Foo->New(4257);
		}

		method : public : GetII() ~ Int[] {
			return ii;
		}

		method : public : GetFF() ~ Float[] {
			return ff;
		}

		method : public : GetFoo() ~ Foo {
			return x;
		}

		method : public : GetBar() ~ Foo {
			return y;
		}
	}

	class BasicBlocks {
		function : Main(args : System.String[]) ~ Nil {

			serial := Serializer->New();
			serial->Write(101);
			serial->Write(3.5);

			array : Byte[];
#~
			array := Byte->New[4];
			array[0] := 200;
			array[1] := 27;
			array[2] := 6;
			array[3] := 13;
~#
			serial->Write(array);

#~
			array2:= Int->New[3];
			array2[0] := 2;
			array2[1] := 3;
			array2[2] := 4;
			serial->Write(array2);

			array3:= Float->New[2];
			array3[0] := 3.5;
			array3[1] := 4.5;
			serial->Write(array3);
~#

			t := Test->New();
#			t : Test;
			serial->Write(t->As(Base));
			
			writer := FileWriter->New("data.dat");
			writer->WriteBuffer(serial->Serialize());
			writer->Close();
			
			data := FileReader->ReadBinaryFile("data.dat");
			deserial := Deserializer->New(data);

			v1 := deserial->ReadInt();
			v1->PrintLine();

			v2 := deserial->ReadFloat();
			v2->PrintLine();

			a := deserial->ReadByteArray();
			if(a <> Nil) {
				b := a[1]->As(Int);
				b->PrintLine();

				b := a[0]->As(Int);
				b->PrintLine();
			};
#~
			c := deserial->ReadIntArray();
			d := c[1]->As(Int);
			d->PrintLine();

			e := deserial->ReadFloatArray();
			f := e[1]->As(Float);
			f->PrintLine();
~#

			g := deserial->ReadObject()->As(Test);
			"0000"->PrintLine();
			if(g <> Nil) {
			"1111"->PrintLine();
				gg := g->GetII();
				gg[2]->PrintLine();
				ggg := g->GetFF();
				if(ggg <> Nil) {
					ggg[1]->PrintLine();
				};

				o := g->GetFoo();
				o->GetF()->PrintLine();

				w := g->GetBar();
				if(w <> Nil) {
					w->GetI()->PrintLine();
				};
			};
		}
	}
}
