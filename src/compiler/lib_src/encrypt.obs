#~~
# Objeck encryption routines 
# Copyright (c) 2013 Randy Hollines
# 
# credits/contributor:
# Greg Canty - Base64 support (http://www.the9375.com/cc/base64/base64.cpp.html)
# Copyright (c) 2012 Greg Canty  
~~#	

use Collection;
use System.API;

bundle Encryption {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/openssl/openssl");
			};

			return @lib_proxy;
		}
	}
	
	#~
	# Hash class
	~#
	class Hash {
		function : SHA256(input : Byte[]) ~ Byte[] {
			if(input <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_hash_sha256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
		
		function : MD5(input : Byte[]) ~ Byte[] {
			if(input <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_hash_md5", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
		
		function : RIPEMD160(input : Byte[]) ~ Byte[] {
			if(input <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_hash_ripemd160", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
	}
	
	#~
	# Encryption class
	~#
	class Encrypt {
		function : AES256(key : Byte[], input : Byte[]) ~ Byte[] {
			if(key <> Nil & input <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(key);
				array_args[2] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_encrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}

		function : native : Base64(in : String) ~ String {
			lut :=  [ 
				'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',  
				'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',  
				'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',  
				'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',  
				'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',  
				'o', 'p', 'q', 'r', 's', 't', 'u', 'v',  
				'w', 'x', 'y', 'z', '0', '1', '2', '3',  
				'4', '5', '6', '7', '8', '9', '+', '/' 
			];
			data := in->ToCharArray();
			dSize := data->Size();
	  				
			# Order of ops is critical in this block 
			nSets := dSize / 3; 
			nExtra := dSize % 3; 
			end := nSets * 3;   
		
			# Primary encoding loop 
			r := "";
			i : Int; 
			a := 0;
			for(i := 0; i < end; i += 3;) { 
				a := (data[i] << 16) or (data[i+1] << 8) or (data[i+2]); 
				r->Append( lut[0x3F and (a >> 18)] ); 
				r->Append( lut[0x3F and (a >> 12)] ); 
				r->Append( lut[0x3F and (a >> 6)] ); 
				r->Append( lut[0x3F and a] ); 
			};
			# Handle the last 1 or 2 bytes if they exist. 
			if ( nExtra = 1 ) 
			{ 
				a := 0 or (data[i] << 16); 
				r->Append( lut[0x3F or (a >> 18)] ); 
				r->Append( lut[0x3F or (a >> 12)] ); 
				r->Append('='); 
				r->Append('='); 
			} 
			else if ( nExtra = 2 ) 
			{ 
				a := 0 or (data[i] << 16) or (data[i+1] << 8); 
				r->Append( lut[0x3F and (a >> 18)] ); 
				r->Append( lut[0x3F and (a >> 12)] ); 
				r->Append( lut[0x3F and (a >> 6)] ); 
				r->Append('=');
			};
	  		
			return r;
		}
	}
	
	#~
	# Decryption class
	~#
	class Decrypt {
		function : AES256(key : Byte[], input : Byte[]) ~ Byte[] {
			if(key <> Nil & input <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(key);
				array_args[2] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_decrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}

		function : native : Base64(in : String) ~ String {
			lut := [ 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0, 0x3E,    0,    0,    0, 0x3F, 
			0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 
			0x3C, 0x3D,    0,    0,    0,    0,    0,    0, 

			   0, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  
			0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,  
			0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,  
			0x17, 0x18, 0x19,    0,    0,    0,    0,    0, 

			   0, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,  
			0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,  
			0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,  
			0x31, 0x32, 0x33,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 

			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0, 
			   0,    0,    0,    0,    0,    0,    0,    0 
			];
	
			a := 0; b := 0; c := 0; d := 0; z := 0;
		
			ustr := in->ToCharArray();
			strSize := ustr->Size(); 

			# Order of ops is critical in this block 
			nSets := strSize / 4; 
			nExtra := strSize % 4; 
			end := nSets * 4;
	
			# Primary decoding loop 
			r := "";
			i : Int;
			for ( i := 0; i < end; i += 4; ) 
			{ 
				a := lut[ ustr[i]   ]; 
				b := lut[ ustr[i+1] ]; 
				c := lut[ ustr[i+2] ]; 
				d := lut[ ustr[i+3] ]; 
			 
				z := (a << 18) or (b << 12) or (c << 6) or d; 
	  
				r->Append( (z >> 16)->As(Char) ); 
				r->Append( ((z >> 8) and 0xFF)->As(Char) ); 
				r->Append( (z and 0xFF)->As(Char) ); 
			};
		
			# Handle the last 1 to 3 base64 digits if they exist 
			if ( nExtra = 1 ) 
			{ 
				a := lut[ ustr[i] ]; 
				z := a << 18; 
				r->Append( (z >> 16)->As(Char) ); 
			}
			else if ( nExtra = 2 ) 
			{ 
				a := lut[ ustr[i] ]; 
				b := lut[ ustr[i+1] ]; 

				z := (a << 18) or (b << 12); 

				r->Append( (z >> 16)->As(Char) ); 
				r->Append( (z >> 8)->As(Char) ); 
			} 
			else if ( nExtra = 3 ) 
			{ 
				a := lut[ ustr[i] ]; 
				b := lut[ ustr[i+1] ]; 
				c := lut[ ustr[i+2] ]; 

				z := (a << 18) or (b << 12) or (c << 6); 

				r->Append( (z >> 16)->As(Char) ); 
				r->Append( ((z >> 8) and 0xFF)->As(Char) ); 
				r->Append( (z and 0xFF)->As(Char) ); 
			};
		
			return r;
		}
	}
}

