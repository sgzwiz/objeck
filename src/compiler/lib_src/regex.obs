#~~
# Regular expression engine
#
# Copyright (c) 2012 Randy Hollines
~~#

use Collection;

bundle RegEx {
	# ---------- regular expression matcher ----------
	class RegEx {
		# parsing
		@tokens : Char[];
		@token_pos : Int;
		@token : Char;		
		@expressions : Vector;
		@error : String;
		@starts_anchor : Bool;
		
		# matching
		@input : Char[];
		@input_pos : Int;
		@input_char : Char;
		@is_exact : Bool;
		@is_backtracking : Bool;
		@backtrack_cache : IntMap;
		@backtrack_positions : IntVector;
        
		New(input : String) {
			@tokens := input->ToCharArray();
			@expressions := Vector->New();
			@backtrack_positions := IntVector->New();
			@backtrack_cache := IntMap->New();

			Parse();
		}

		# ---------- matching methods ----------
		method : public : MatchExact(input : String) ~ Bool {
            return Evaluate(input, 0) > -1 & @is_exact;
		}

		method : public : Match(input : String) ~ String {
			return Match(input, 0);
		}
		
		method : public : Match(input : String, offset : Int) ~ String {
			right := Evaluate(input, 0);
			if(right > -1) {
				return input->SubString(offset, right - offset);
			};
			
			return "";
		}

		method : public : native : FindFirst(input : String) ~ String {
			matches := Vector->New();
			left := 0;
			while(left < input->Size()) {
				right := Evaluate(input, left);
				if(right > -1) {
					return input->SubString(left, right - left);
				};
				left += 1;
			};

			return "";
		}

		method : public : native : Find(input : String) ~ Vector {
			matches := Vector->New();
			left := 0;
			while(left < input->Size()) {
				right := Evaluate(input, left);
				if(right > -1 & left <> right) {
# IO.Console->Print("\t=== left=")->Print(left)->Print(", right=")->Print(right)->PrintLine(" ===");
					if(left < right) {
						matches->AddBack(input->SubString(left, right - left));
						left := right - 1;
					};
				};
				left += 1;
			};

			return matches;
		}

		method : public : native : ReplaceFirst(input : String, replace : String) ~ String {
			left := 0;
			while(left < input->Size()) {
				right := Evaluate(input, left);
				if(right > -1 & left <> right) {
					# identify start and end of input string
					start := input->SubString(left);
					end := input->SubString(right, input->Size() - right);
					# insert the replacement string
					input := String->New(start);
					input->Append(replace);
					input->Append(end);	
					
					return input;
				};
				left += 1;
			};

			return input;
		}

		method : public : native : ReplaceAll(input : String, replace : String) ~ String {
			left := 0;
			while(left < input->Size()) {
				right := Evaluate(input, left);
				if(right > -1 & left <> right) {
					# identify start and end of input string
					start := input->SubString(left);
					end := input->SubString(right, input->Size() - right);
					# insert the replacement string
					input := String->New(start);
					input->Append(replace);
					input->Append(end);	
					# update search index
					left += replace->Size() - 1;
				};
				left += 1;
			};

			return input;
		}

		method : native : Evaluate(input : String, offset : Int) ~ Int {
			if(@error <> Nil) {
				@error->PrintLine();
				return -1;
			};

			if(offset >= input->Size()) {
				return -1;
			};
			
			# reset everything
			@is_exact := false;
			@is_exact := false;
			@is_backtracking := false;
			@backtrack_cache->Empty();
			@backtrack_positions->Empty();

			# process string
			@input_pos := offset;			
			@input := input->ToCharArray();			
			NextInput();

			# match with regex and check final position
			match := Evaluate(@expressions, 0);
# IO.Console->Print("@@@ pos=")->Print(@input_pos)->Print(", match=")->Print(match)->Print(", end=")->PrintLine(@input_char);
			if(match & @input_char <> '\0') {
				return @input_pos - 1;
			}
			else if(match) {
				@is_exact := true;
				return @input_pos;
			};
			
			return -1;
		}
		
		method : private : NextInput() ~ Nil {
			if(@input_pos < @input->Size()) {
				@input_char := @input[@input_pos];
				@input_pos += 1;
			}
			else {
				@input_char := '\0';
			};
		}	
		
		method : private : Evaluate(expressions : Vector, offset : Int) ~ Bool {
			for(i := offset; i < expressions->Size(); i += 1;) {
				if(Evaluate(expressions->Get(i)->As(Expression)) = false) {
					if(@is_backtracking) {
						@is_backtracking := false;
# IO.Console->Print("backtracking: token count=")->PrintLine(@backtrack_positions->Size());
						while(@backtrack_positions->IsEmpty() = false) {							
							@input_pos := @backtrack_positions->RemoveBack() - 1;
							NextInput();
							
							start := @input_pos;
							check := @backtrack_cache->Find(@input_pos);
							if(offset + 1 < expressions->Size() & check = expressions->Get(offset + 1)) {
								return true; 
							};

							if(Evaluate(expressions, offset + 1)) {
								if(offset + 1 < expressions->Size()) {
									@backtrack_cache->Insert(@input_pos, expressions->Get(offset + 1));
								};
								return true;
							};
						};
					};
					
					return false;
				};
			};
			
			return true;
		}

		method : private : InRange(char_class : String, check : Char) ~ Bool {
			return char_class->Get(0) <= check & char_class->Get(2) >= check;
		}

		method : private : InClass(char_class : String, check : Char) ~ Bool {
			for(i := 0; i < char_class->Size(); i += 1;) {
				if(char_class->Get(i) = check) {
					return true;
				};
			};
			
			return false;
		}
		
		method : native : Evaluate(expression : Expression) ~ Bool {
			if(expression <> Nil) {
				if(@is_backtracking & @input_char <> '\0') {
					@backtrack_positions->AddBack(@input_pos);
				};
				
# IO.Console->Print("--- type=")->Print(expression->GetType()->As(Int))->PrintLine(" ---");
 				
				select(expression->GetType()) {
					# single character
					label ExpressionType->CHAR: {
# IO.Console->Print("[### matching: expr='")->Print(expression->GetValue())->Print("', input='")->Print(@input_char)->PrintLine("' ###]");
						if(expression->GetValue() = @input_char) {
							NextInput();
							return true;
						};
					}
	
					# any character
					label ExpressionType->ANY: {
# "[### any ###]"->PrintLine();
						NextInput();
						return true;							
					}
					
					# digit
					label ExpressionType->DIGIT: {
# "[### digit ###]"->PrintLine();
						if(@input_char->IsDigit()) {
							NextInput();
							return true;
						};
					}
					
					# word
					label ExpressionType->WORD: {
# "[### word ###]"->PrintLine();
						if(@input_char->IsDigit() | @input_char->IsChar() | @input_char = '_') {
							NextInput();
							return true;
						};
					}
					
					# whitespace
					label ExpressionType->WHITESPACE: {
# "[### whitespace ###]"->PrintLine();
						if(@input_char = ' ' | @input_char = '\t' | @input_char = '\r' | @input_char = '\n') {
							NextInput();
							return true;
						};
					}

					# class of characters
					label ExpressionType->CHAR_CLASS: {
						char_class := expression->GetClass();
# IO.Console->Print("[### matching range: expr='")->Print(expression->GetClass())->Print("', input='")->Print(@input_char)->PrintLine("' ###]");
						if(InClass(char_class, @input_char)) {
							NextInput();
							return true;
						};
					}

					# range of characters
					label ExpressionType->CHAR_CLASS_RANGE: {
# IO.Console->Print("[### matching: range='")->Print(expression->GetClass())->Print("', input='")->Print(@input_char)->PrintLine("' ###]");					
						char_class := expression->GetClass();
						if(InRange(char_class, @input_char)) {
							NextInput();
							return true;
						};
					}
					
					# starts anchor
					label ExpressionType->STARTS_ANCHOR: {
# IO.Console->Print("[### starts anchor: pos=")->Print(@input_pos - 1)->Print(", input='")->Print(@input_char)->PrintLine("' ###]");				
						if(@input_pos - 1 = 0 & Evaluate(expression->GetExpression())) {
							return true;				
						};
					}
					
					# ends anchor
					label ExpressionType->ENDS_ANCHOR: {
# "[### ends anchor ###]"->PrintLine();
						if(Evaluate(expression->GetExpression()) & @input_char = '\0') {
							return true;				
						};
					}

					# logical OR
					label ExpressionType->OR: {
# "[### or ###]"->PrintLine();					
						prev_pos := @input_pos;
						if(Evaluate(expression->GetLeft(), 0)) {
							return true;
						}
						else {
							@input_pos := prev_pos - 1;
							NextInput();
							return Evaluate(expression->GetRight(), 0);
						};
					}
	
					# zero or more
					label ExpressionType->ZERO_MORE: {
# "[### zero_or_more ###]"->PrintLine();
						@is_backtracking := true;
						if(expression->GetExpression()->GetType() = ExpressionType->SUB_EXPR) {
							do {
								match := Evaluate(expression->GetExpression()->GetLeft(), 0);
							} 
							while(@input_char <> '\0' & match);
						}
						else {
							if(expression->GetExpression()->GetType() = ExpressionType->ANY) {
								@is_backtracking := true;
							};
							
							do {	
								match := Evaluate(expression->GetExpression());
							}
							while(@input_char <> '\0' & match);
						};
						
						return true;
					}

					# one or more
					label ExpressionType->ONE_MORE: {
# "[### one_or_more ###]"->PrintLine();
						if(expression->GetExpression()->GetType() = ExpressionType->SUB_EXPR) {
							if(Evaluate(expression->GetExpression()->GetLeft(), 0)) {
								@is_backtracking := true;

								do {
									match := Evaluate(expression->GetExpression()->GetLeft(), 0);
								} 
								while(@input_char <> '\0' & match);

								return true;
							};
						}
						else {
							if(Evaluate(expression->GetExpression())) {
								@is_backtracking := true;
								
								do {	
									match := Evaluate(expression->GetExpression());
								}
								while(@input_char <> '\0' & match);

								return true;
							};
						};
					}
					
					# repeat
					label ExpressionType->REPEAT: {
# "[### repeat ###]"->PrintLine();
						count := 0;
						if(expression->GetExpression()->GetType() = ExpressionType->SUB_EXPR) {
							do {
								match := Evaluate(expression->GetExpression()->GetLeft(), 0);
								if(match) {
									count += 1;
								};
							} 
							while(@input_char <> '\0' & match);
						}
						else {
							if(expression->GetExpression()->GetType() = ExpressionType->ANY) {
								@is_backtracking := true;
							};
							
							do {	
								match := Evaluate(expression->GetExpression());
								if(match) {
									count += 1;
								};
							}
							while(@input_char <> '\0' & match);
						};
# IO.Console->Print("\tleast=")->Print(expression->GetLeast())->Print(", most=")->Print(expression->GetMost())->Print(", count=")->PrintLine(count);
						
						if(expression->GetMost() = -1) {
							return expression->GetLeast() >= count;
						}
						else {
							return expression->GetLeast() <= count & expression->GetMost() >= count;
						};
					}
					
					# single optional
					label ExpressionType->OPTIONAL: {
# "[### optional ###]"->PrintLine();
						if(expression->GetExpression()->GetType() = ExpressionType->SUB_EXPR) {
							Evaluate(expression->GetExpression()->GetLeft(), 0);
						}
						else {
							Evaluate(expression->GetExpression());
						};
						
						return true;
					}
					
					# sub-expression
					label ExpressionType->SUB_EXPR: {
						return Evaluate(expression->GetLeft(), 0);						
					}
				};
			};

			return false;
		}

		# ---------- parsing methods ----------
		method : private : NextToken() ~ Nil {
			if(@token_pos < @tokens->Size()) {
				@token := @tokens[@token_pos];
				@token_pos += 1;
			}
			else {
				@token := '\0';
			};
		}	

		method : private : Parse() ~ Nil {
			NextToken();
			Binary();
			
			# consume starts with
			if(@starts_anchor) {
				@error := "stray token";
			};
		}
		
		method : private : Binary() ~ Nil {
			# consume starts with
			if(@starts_anchor & @expressions->Size() > 0) {
				expression := @expressions->RemoveBack()->As(Expression);
				@expressions->AddBack(Expression->New(ExpressionType->STARTS_ANCHOR, expression));
				@starts_anchor := false;
# IO.Console->Print("match: starts anchor; with=")->PrintLine(expression->GetType()->As(Int));	
			};
		
			while(@token <> '\0' & @token <> ')' & @token <> '|') {
				Unary();		
				if(@error <> Nil) {
					return;
				};
			};
			
			if(@token = '|') {
				NextToken();				
				
				left := @expressions;
				@expressions := Vector->New();
				
				Binary();
				if(@error <> Nil) {
					return;
				};
				
				right := @expressions;
				@expressions := Vector->New();
				
				@expressions->AddBack(Expression->New(left, right));
# IO.Console->PrintLine("match: or_match");					
			};
		}
		
		method : private : Unary() ~ Nil {
			# consume starts with
			if(@starts_anchor & @expressions->Size() > 0) {
				expression := @expressions->RemoveBack()->As(Expression);
				@expressions->AddBack(Expression->New(ExpressionType->STARTS_ANCHOR, expression));
				@starts_anchor := false;
# IO.Console->Print("match: starts anchor; with=")->PrintLine(expression->GetType()->As(Int));	
			};
			
			Value();
			if(@error <> Nil) {
				return;
			};

			if(@token = '*') {
				if(@expressions->Size() > 0) {
					expression := @expressions->RemoveBack()->As(Expression);
					@expressions->AddBack(Expression->New(ExpressionType->ZERO_MORE, expression));
					NextToken();
# IO.Console->PrintLine("match: zero_or_more");					
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			}
			else if(@token = '+') {
				if(@expressions->Size() > 0) {
					expression := @expressions->RemoveBack()->As(Expression);
					@expressions->AddBack(Expression->New(ExpressionType->ONE_MORE, expression));
					NextToken();
# IO.Console->PrintLine("match: one_or_more");					
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			}
			else if(@token = '?') {
				if(@expressions->Size() > 0) {
					expression := @expressions->RemoveBack()->As(Expression);
					@expressions->AddBack(Expression->New(ExpressionType->OPTIONAL, expression));
					NextToken();
# IO.Console->PrintLine("match: optional");					
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			}
			else if(@token = '$') {
				if(@expressions->Size() > 0) {
					expression := @expressions->RemoveBack()->As(Expression);
					@expressions->AddBack(Expression->New(ExpressionType->ENDS_ANCHOR, expression));
					NextToken();
# "match: ends anchor"->PrintLine();
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			}	
			else if(@token = '{') {
				if(@expressions->Size() > 0) {
					NextToken();
					
					Whitespace();
					least := Number()->ToInt();
					if(@error <> Nil) {
						return;
					};
					
					Whitespace();
					most := -1;
					if(@token = ',') {
						NextToken();
						Whitespace();
						most := Number()->ToInt();
						if(@error <> Nil) {
							return;
						};
					};
					
					Whitespace();		
					if(@token <> '}') {
						@error := "expected '}'";
						return;
					};
					NextToken();
					
# IO.Console->Print("index: start='")->Print(least)->Print("', most='")->Print(most)->PrintLine("'");										
					
					expression := @expressions->RemoveBack()->As(Expression);
					@expressions->AddBack(Expression->New(least, most, expression));
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			};
		}
		
		method : private : Whitespace() ~ Nil {
			while(@token <> '\0' & (@token = ' ' | @token = '\t' | @token = '\r' | @token = '\n')) {
				NextToken();
			};
		}
		
		method : private : Number() ~ String {
			start := @token_pos - 1;
			while(@token <> '\0' & @token->IsDigit()) {
				NextToken();
			};
			
			if(start = @token_pos) {
				@error := "invalid number";
				return "";
			};
			
			return String->New(@tokens, start, @token_pos - start - 1);
		}
		
		method : private : Value() ~ Nil {
			# consume starts with
			if(@starts_anchor & @expressions->Size() > 0) {
				expression := @expressions->RemoveBack()->As(Expression);
				@expressions->AddBack(Expression->New(ExpressionType->STARTS_ANCHOR, expression));
				@starts_anchor := false;
# IO.Console->Print("match: starts anchor; with=")->PrintLine(expression->GetType()->As(Int));	
			};		
		
			if(@token = '(') {
				Parentheses();				
			}
			else if(@token = '[') {
				CharacterClass();
			}
			else if(@token = '\\') {
				EscapeCharacter();
# "char: escaped"->PrintLine();
			}			
			else if(@token = '.') {
				@expressions->AddBack(Expression->New());
# "match: any"->PrintLine();			
				NextToken();
			}
			else if(@token = '^') {
				@starts_anchor := true;
				NextToken();
			}			
			else {
				select(@token) {
					label '*':
					label '+':
					label '?':
					label '$':
					label '{': { # nop processed by unary method
					}
					
					other: {
						@expressions->AddBack(Expression->New(@token));
# IO.Console->Print("match: char=")->PrintLine(@token);				
						NextToken();
					}
				};
			};
		}
		
		method : private : CharacterClass() ~ Nil {	
			NextToken();

			if(@token->IsChar() = false & @token->IsDigit() = false) {
				@error := "invalid character class";
			};
			
			start := @token_pos - 1;
			hyphen_count := 0;
			while(@token <> '\0' & @token <> ']' & (@token = '-' | @token->IsChar() | @token->IsDigit())) { 
				if(@token = '-') {
					hyphen_count += 1;
				};
				NextToken();
			};
			end := @token_pos - 1;
			char_class := String->New(@tokens, start, end - start);

			if(@token <> ']') {
				@error := "expected ')'";
				return;
			};
			NextToken();
			
			if(hyphen_count > 1) {
				@error := "invalid character class";
			};

			is_range := false;
			if(hyphen_count = 1) {
				if(char_class->Size() <> 3) {
					@error := "invalid character class";
					return; # to avoid an issue with next statement
				};
				
				if(char_class->Get(0) >= char_class->Get(2)) {
					@error := "invalid character class";
				};

				is_range := true;				
			};
# IO.Console->Print("match range: class=")->PrintLine(char_class);
			@expressions->AddBack(Expression->New(char_class, is_range));
		}

		method : private : EscapeCharacter() ~ Nil {
			NextToken();
			select(@token) {
				label '(':
				label ')':
				label '[':
				label ']':
				label '}':
				label '{':
				label '|':
				label '.':
				label '?':
				label '^':
				label '$': 
				label '*':
				label '+': {
					@expressions->AddBack(Expression->New(@token));
					NextToken();
				}
				
				label 'd': {
					@expressions->AddBack(Expression->New(ExpressionType->DIGIT));
					NextToken();
				}
				
				label 'w': {
					@expressions->AddBack(Expression->New(ExpressionType->WORD));
					NextToken();
				}
				
				label 's': {
					@expressions->AddBack(Expression->New(ExpressionType->WHITESPACE));
					NextToken();
				}
				
				label 'n': {
					@expressions->AddBack(Expression->New('\n'));
					NextToken();
				}

				label 'r': {
					@expressions->AddBack(Expression->New('\r'));
					NextToken();
				}

				label 'b': {
					@expressions->AddBack(Expression->New('\b'));
					NextToken();
				}

				label 't': {
					@expressions->AddBack(Expression->New('\t'));
					NextToken();
				}

				label '\\': {
					@expressions->AddBack(Expression->New('\\'));
					NextToken();
				}
			};
		}

		method : private : Parentheses() ~ Nil {
			NextToken();
			
			left := @expressions;
			@expressions := Vector->New();
				
			Binary();
			if(@error <> Nil) {
				return;
			};
		
			if(@token <> ')') {
				@error := "expected ')'";
				return;
			};
			NextToken();
			
			# combine lists			
			left->AddBack(Expression->New(@expressions));
			@expressions := left;
# IO.Console->PrintLine("parentheses");		
		}
	}
	
	# expression type
	enum ExpressionType := -100 {
		CHAR,
		ANY,
		OPTIONAL,
		DIGIT,
		WORD,
		WHITESPACE,
		CHAR_CLASS,
		CHAR_CLASS_RANGE,
		ENDS_ANCHOR,
		STARTS_ANCHOR,
		OR,
		ZERO_MORE,
		ONE_MORE,
		REPEAT,
		SUB_EXPR
	}
	
	# ---------- subexpression value object ----------
	class Expression {
		@type : ExpressionType;
		@value : Char;
		@char_class : String;
		@expression : Expression;
		@left : Vector;
		@right : Vector;
		@least : Int;
		@most : Int;
		
		New() {
			@type := ExpressionType->ANY;
		}

		New(value : Char) {
			@type := ExpressionType->CHAR;
			@value := value;
		}

		New(least : Int, most : Int, expression : Expression) {
			@type := ExpressionType->REPEAT;
			@least := least;
			@most := most;
			@expression := expression;
		}
		
		New(char_class : String, is_range : Bool) {
			if(is_range) {
				@type := ExpressionType->CHAR_CLASS_RANGE;
			}
			else {
				@type := ExpressionType->CHAR_CLASS;
			};
			@char_class := char_class;
		}
		
		New(left : Vector) {
			@type := ExpressionType->SUB_EXPR;
			@left := left;
		}
		
		New(type : ExpressionType) {
			@type := type;
		}
		
		New(type : ExpressionType, expression : Expression) {
			@type := type;
			@expression := expression;
		}

		New(left : Vector, right : Vector) {
			@type := ExpressionType->OR;
			@left := left;
			@right := right;
		}

		method : public : GetType() ~ ExpressionType {
			return @type;
		}
		
		method : public : GetValue() ~ Char {
			return @value;
		}

		method : public : GetClass() ~ String {
			return @char_class;
		}
		
		method : public : GetLeft() ~ Vector {
			return @left;
		}
		
		method : public : GetRight() ~ Vector {
			return @right;
		}
			
		method : public : GetLeast() ~ Int {
			return @least;
		}
		
		method : public : GetMost() ~ Int {
			return @most;
		}
		
		method : public : GetExpression() ~ Expression {
			return @expression;
		}
	}
	
	# ---------- match types ----------
	enum EvalType := -200 {
		MATCH,
		MATCH_NEXT,
		NO_MATCH
	}
}
