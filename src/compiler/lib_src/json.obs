#~~
# JSON parsing library
# Copyright (c) 2012 Randy Hollines
~~#

use Collection;

bundle JSON {
	class JSONParser {
		@input : String;
		@tokens : Vector;
		@token_pos : Int;
		@cur_token : Token;
		
		New(input : String) {
			@input := input;
			@tokens : Nil;
			@token_pos := 0;
		}

		method : GetToken(pos : Int) ~ Token {
			if(pos < @tokens->Size()) {
				return @tokens->Get(pos)->As(Token);
			};
			
			return Token->New(TokenType->EOS);
		}
		
		method : Match(token : TokenType) ~ Bool {
			return @cur_token->GetType() = token;
		}

		# parse JSON elements
		method : public : Parse() ~ JSONElement {
			@tokens := Scan();
			if(@tokens->Size() > 0) {
# DumpTokens(@tokens);
				NextToken();
				return ParseValue();
			};
			
			return Nil;
    	}
		
		method : NextToken() ~ Nil {
			if(@token_pos < @tokens->Size()) {
				@cur_token := @tokens->Get(@token_pos)->As(Token);
				@token_pos += 1;
			}
			else {
				@cur_token := Token->New(TokenType->EOS);
			};
		}
		
		method : public : ParseValue() ~ JSONElement {
			element : JSONElement;
			
			select(@cur_token->GetType()) {
				label TokenType->OBR: {
# "array"->PrintLine();
					element := ParseArray();
				}

				label TokenType->OCBR: {
# "object"->PrintLine();				
					element := ParseObject();						
				}

				label TokenType->IDENT: {
					element := JSONElement->New(@cur_token->GetValue());
# Console->Print("string=")->PrintLine(@cur_token->GetValue());
					NextToken();
					
				}
				
				label TokenType->INT_NUM:
				label TokenType->FLOAT_NUM: {
					element := JSONElement->New(JSONType->NUMBER, @cur_token->GetValue());
# Console->Print("number=")->PrintLine(@cur_token->GetValue());
					NextToken();
				}
				
				label TokenType->TRUE: {
					element := JSONElement->New(JSONType->TRUE);
# "true"->PrintLine();
					NextToken();
				}
				
				label TokenType->FALSE: {
					element := JSONElement->New(JSONType->FALSE);
# "false"->PrintLine();
					NextToken();
				}
				
				label TokenType->NULL: {
					element := JSONElement->New(JSONType->NULL);
# "null"->PrintLine();
					NextToken();
				}
				
				other: {
					"*** Unexpected value *** "->PrintLine();
# @cur_token->GetType()->As(Int)->PrintLine();				
					return Nil;
				}
			};
			
			return element;
		}

		# parse JSON object
		method : public : ParseObject() ~ JSONElement {
			elements := StringMap->New();
			
			NextToken();
			while(@cur_token->GetType() <> TokenType->EOS & 
				@cur_token->GetType() <> TokenType->CCBR) {
				
				# parse name
				elem_name : Token;
				if(Match(TokenType->IDENT) = false) {
					"*** Expected identifier *** "->PrintLine();
# @cur_token->GetType()->As(Int)->PrintLine();				
					return Nil;
				};			
				elem_name := @cur_token;
				NextToken();
				
				if(Match(TokenType->COLON) = false) {
					"*** Expected ':' *** "->PrintLine();
# @cur_token->GetType()->As(Int)->PrintLine();				
					return Nil;
				};
				NextToken();
				
				# parse value
				value := ParseValue();
				if(value = Nil) {				
					return Nil;
				};
# IO.Console->Print("insert=")->PrintLine(elem_name->GetValue());		
				elements->Insert(elem_name->GetValue(), value);				
				
				# update
				if(Match(TokenType->COMMA)) {
					NextToken();
# "comma"->PrintLine();
				};
			};
			
			if(Match(TokenType->CCBR) = false) {
				"*** Expected '}' *** "->PrintLine();
# @cur_token->GetType()->As(Int)->PrintLine();				
				return Nil;
			};
			NextToken();
			
			return JSONElement->New(elements);
		}

		# parse JSON array
		method : public : ParseArray() ~ JSONElement {
			elements := Vector->New();
			
			NextToken();
			while(@cur_token->GetType() <> TokenType->EOS & 
				@cur_token->GetType() <> TokenType->CBR) {
				value := ParseValue();
				if(value = Nil) {
					return Nil;
				};
				elements->AddBack(value);
				
				# update
				if(Match(TokenType->COMMA)) {
					NextToken();
# "comma"->PrintLine();
				};
			};
			
			if(Match(TokenType->CBR) = false) {
				"*** Expected ']' *** "->PrintLine();
# @cur_token->GetType()->As(Int)->PrintLine();				
				return Nil;
			};
			NextToken();
			
			return JSONElement->New(elements);
		}

		# scan JSON tokens
		method : native : Scan() ~ Vector {
			tokens := Vector->New();
						
			input := @input->ToCharArray();
			if(input <> Nil) {
				index := 0;				
				while(index < input->Size()) {
					# skip whitespace
					while(index < input->Size() & (input[index] = '\r' | input[index] = '\n' |
						input[index] = '\t' | input[index] = ' ')) {
						# update
						index += 1;
					};

					# parse string
					if(input[index] = '"') {
						index += 1;
						offset := index;
						end := false;
						escape := false;
						while(index < input->Size() & end = false) {
							if(input[index] = '"' & escape = false) {
								# done
								end := true;
							}
							else if(input[index] = '\\') {
								escape := true;
								# update
								index += 1;
							}
							else {
								escape := false;
								# update
								index += 1;
							};
						};
						len := index - offset;
						if(len > 0) {
							string := @input->SubString(offset, len);
							if(string->Equals("true")) {
								tokens->AddBack(Token->New(TokenType->TRUE));
							}
							else if(string->Equals("false")) {
								tokens->AddBack(Token->New(TokenType->FALSE));
							}
							else if(string->Equals("null")) {
								tokens->AddBack(Token->New(TokenType->NULL));
							}
							else {							
								tokens->AddBack(Token->New(TokenType->IDENT, string));
							};
						}
						else {
							tokens->AddBack(Token->New(TokenType->IDENT, ""));
						};
						# update
						index += 1;
					}
					# true
					else if(input[index] = 't' | input[index] = 'f' | input[index] = 'n') {
						offset := index;
						while(index < input->Size() & input[index]->IsChar()) {
							# update
							index += 1;
						};
						len := index - offset;
						
						if(len > 0) {
							string := @input->SubString(offset, len);
							if(string->Equals("true")) {
								tokens->AddBack(Token->New(TokenType->TRUE));
							}
							else if(string->Equals("false")) {
								tokens->AddBack(Token->New(TokenType->FALSE));
							}
							else if(string->Equals("null")) {
								tokens->AddBack(Token->New(TokenType->NULL));
							}
							else {
								tokens->AddBack(Token->New(TokenType->BAD_NUM, string));
							};
						}
						else {
							tokens->AddBack(Token->New(TokenType->BAD_NUM, ""));
						};
					}
					# parse number
					else if(input[index]->IsDigit() | input[index] = '-' | input[index] = '.') {
						offset := index;
						minus_count := 0;
						dot_count := 0;

						# TODO: e digits
						while(index < input->Size() & 
							(input[index]->IsDigit() | input[index] = '-' | input[index] = '.' | input[index] = 'e' | input[index] = 'E')) {
							if(input[index] = '-') {
								minus_count += 1;
							}
							else if(input[index] = '.') {
								dot_count += 1;
							};
							# update
							index += 1;
						};
						len := index - offset;

						if(len > 0) {
							string := @input->SubString(offset, len);
							if(dot_count = 1 & minus_count < 2) {
								tokens->AddBack(Token->New(TokenType->FLOAT_NUM, string));
							}
							else if(dot_count = 0 & minus_count < 2) {
								tokens->AddBack(Token->New(TokenType->INT_NUM, string));
							}
							else {
								tokens->AddBack(Token->New(TokenType->BAD_NUM, string));
							};
						}
						else {
							tokens->AddBack(Token->New(TokenType->BAD_NUM, ""));
						};
					}
					# parse characters
					else {
						select(input[index]) {
							label '[': {
								tokens->AddBack(Token->New(TokenType->OBR));
							}
		
							label ']': {
								tokens->AddBack(Token->New(TokenType->CBR));
							}

							label '{': {
								tokens->AddBack(Token->New(TokenType->OCBR));
							}
		
							label '}': {
								tokens->AddBack(Token->New(TokenType->CCBR));
							}

							label ',': {
								tokens->AddBack(Token->New(TokenType->COMMA));
							}

							label ':': {
								tokens->AddBack(Token->New(TokenType->COLON));
							}

							other: {
								tokens->AddBack(Token->New(TokenType->OTHER));
# IO.Console->Print("other=")->PrintLine(input[index]->As(Int));
							}
						};
						# update
						index += 1;
					};
				};
			};
			
			return tokens;
	 	}

		method : DumpTokens(tokens : Vector) ~ Nil {
			if(tokens->Size() > 0) {
				each(i : tokens) {
					select(tokens->Get(i)->As(Token)->GetType()) {
						label TokenType->IDENT: {
							IO.Console->Print("token=IDENT, value=")->PrintLine(tokens->Get(i)->As(Token)->GetValue());
						}

						label TokenType->INT_NUM: {
							IO.Console->Print("token=INTEGER, value=")->PrintLine(tokens->Get(i)->As(Token)->GetValue());
						}

						label TokenType->FLOAT_NUM: {
							IO.Console->Print("token=FLOAT, value=")->PrintLine(tokens->Get(i)->As(Token)->GetValue());
						}

						label TokenType->OBR: {
							"token='['"->PrintLine();
						}

						label TokenType->CBR: {
							"token=']'"->PrintLine();
						}            

						label TokenType->OCBR: {
							"token='{'"->PrintLine();
						}

						label TokenType->CCBR: {
							"token='}'"->PrintLine();
						}

						label TokenType->PREN: {
							"token='\"'"->PrintLine();
						}

						label TokenType->COLON: {
							"token=':'"->PrintLine();
						}

						label TokenType->COMMA: {
							"token=','"->PrintLine();
						}

						label TokenType->OTHER: 
						label TokenType->BAD_NUM: {
							"token=OTHER"->PrintLine();
						}						
					};
				};
			};
		}
	}

	# JSON element
	class JSONElement {
		@type : JSONType;
		@value : String;
		@array_elems : Vector;
		@map_elems : StringMap;
		
		New(type : JSONType) {
			if(type = JSONType->TRUE) {
				@type := type;	
				@value := "true";
			}
			else if(type = JSONType->FALSE) {
				@type := type;	
				@value := "false";
			}
			else if(type = JSONType->NULL) {
				@type := type;	
				@value := "";
			}
			else {
				@type := JSONType->OTHER;
			};
		}
		
		New(type : JSONType, value : String) {
			if(type = JSONType->STRING | type = JSONType->NUMBER) {
				@type := type;	
				@value := value;				
			}
			else {
				@type := JSONType->OTHER;
			};
		}

		New(value : String) {
			@type := JSONType->STRING;	
			@value := value;
		}
		
		New(value : Int) {
			@type := JSONType->NUMBER;	
			@value := value->ToString();
		}

		New(value : Float) {
			@type := JSONType->NUMBER;	
			@value := value->ToString();
		}

		New(array_elems : Vector) {
			@type := JSONType->ARRAY;
			@array_elems := array_elems;
		}
		
		New(map_elems : StringMap) {
			@type := JSONType->OBJECT;
			@map_elems := map_elems;
		}
		
		method : public : GetType() ~ JSONType {
			return @type;
		}
		
		method : public : GetValue() ~ String {
			if(@value <> Nil) {
				return @value;
			};
			
			return "";
		}
		
		method : public : Get(index : Int) ~ JSONElement {
			if(@array_elems <> Nil & index < @array_elems->Size()) {
				return @array_elems->Get(index);
			};
			
			return Nil;
		}
		
		method : public : Get(name : String) ~ JSONElement {
			if(@map_elems <> Nil) {
				return @map_elems->Find(name);
			};
			
			return Nil;
		}
		
		method : public : GetKeys() ~ Vector {
			if(@map_elems <> Nil) {
				return @map_elems->GetKeys();
			};
			
			return Nil;
		}
		
		method : public : Size() ~ Int {
			if(@array_elems <> Nil) {
				return @array_elems->Size();
			};
			
			if(@map_elems <> Nil) {
				return @map_elems->Size();
			};
			
			return 0;
		}

		method : public : ToString() ~ String {
			output := String->New();
			Format(output);		
			return output;
		}
		
		method : Format(output : String) ~ Nil {
			select(@type) {
				label JSONType->STRING: {
					if(@value <> Nil) {
						output->Append('"');
						output->Append(@value);
						output->Append('"');
					};
				}

				label JSONType->NUMBER: {
					if(@value <> Nil) {
						output->Append(@value);
					};
				}
				
				label JSONType->TRUE: {
					output->Append("\"true\"");
				}

				label JSONType->FALSE: {
					output->Append("\"false\"");
				}
				
				label JSONType->NULL: {
					output->Append("\"null\"");
				}

				label JSONType->ARRAY: {
					if(@array_elems <> Nil) {
						output->Append('[');
						each(i : @array_elems) {
							@array_elems->Get(i)->As(JSONElement)->Format(output);
							if(i + 1 < @array_elems->Size()) {
								output->Append(',');
							};
						};
						output->Append(']');
					};
				}

				label JSONType->OBJECT: {
					if(@map_elems <> Nil) {
						output->Append('{');
						keys := @map_elems->GetKeys();
						each(i : keys) {
							key := keys->Get(i)->As(String);
							value := @map_elems->Find(key);							
							output->Append('"');
							output->Append(key);
							output->Append("\":");
							value->As(JSONElement)->Format(output);
							if(i + 1 < @map_elems->Size()) {
								output->Append(',');
							};
						};
						output->Append('}');
					};
				}
			};
		}
	}
	
	enum JSONType {
		STRING,
		NUMBER,
		TRUE,
		FALSE,
		NULL,
		ARRAY,
		OBJECT,
		OTHER
	}
	
	# token class
	class Token {
		@type : TokenType;
		@value : String;
		
		New(type : TokenType, value : String) {
			@type := type;
			@value := value;
		}
			
		New(type : TokenType) {
			@type := type;
			@value := Nil;
		}

		method : public : GetType() ~ TokenType {
			return @type;
		}

		method : public : GetValue() ~ String {
			return @value;
		}
	}
	
	# token type
	enum TokenType {
		IDENT,
		INT_NUM,
		FLOAT_NUM,
		BAD_NUM,
		TRUE,
		FALSE,
		NULL,
		COMMA,
		OBR,
		CBR,
		OCBR,
		CCBR,
		PREN,
		COLON,
		OTHER,
		EOS
	}
}
